[
  {
    "type": "function",
    "name": "main",
    "params": "",
    "doc": "",
    "source_file": "./backend/main.go"
  },
  {
    "type": "function",
    "name": "initLogger",
    "params": "",
    "doc": "// Initialize Zap Logger",
    "source_file": "./backend/main.go"
  },
  {
    "type": "function",
    "name": "ZapMiddleware",
    "params": "",
    "doc": "// Middleware to log additional request/response details in structured format",
    "source_file": "./backend/main.go"
  },
  {
    "type": "function",
    "name": "homeDir",
    "params": "",
    "doc": "",
    "source_file": "./backend/main.go"
  },
  {
    "type": "function",
    "name": "NewRegistry",
    "params": "path string",
    "doc": "// NewRegistry initializes a registry, loading from the given JSON file path",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "load",
    "params": "",
    "doc": "// load reads plugins from disk into memory",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "persist",
    "params": "",
    "doc": "// persist writes current plugins map to disk",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "Load",
    "params": "path string",
    "doc": "// Load reads a plugin manifest JSON from the given file path",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "Add",
    "params": "p Plugin",
    "doc": "// Add registers a new plugin and persists the registry",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "Get",
    "params": "name string",
    "doc": "// Get retrieves a plugin by name",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "All",
    "params": "",
    "doc": "// All returns all registered plugins",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "Exists",
    "params": "name string",
    "doc": "// Exists checks if a plugin with the given name exists",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "Update",
    "params": "p Plugin",
    "doc": "// Update modifies existing plugin metadata",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "Delete",
    "params": "name string",
    "doc": "// Delete removes a plugin by name",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "struct",
    "name": "Plugin",
    "params": "",
    "doc": "// Plugin represents metadata for a plugin",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "struct",
    "name": "Registry",
    "params": "",
    "doc": "// Registry stores plugin metadata and persists to disk",
    "source_file": "./backend/plugins/registry.go"
  },
  {
    "type": "function",
    "name": "NewManager",
    "params": "registry *Registry",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "function",
    "name": "Install",
    "params": "manifestPath string",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "function",
    "name": "Remove",
    "params": "name string",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "function",
    "name": "List",
    "params": "",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "function",
    "name": "Enable",
    "params": "name string, enable bool",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "struct",
    "name": "Plugin",
    "params": "",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "struct",
    "name": "Manager",
    "params": "",
    "doc": "",
    "source_file": "./backend/plugins/manager.go"
  },
  {
    "type": "function",
    "name": "RegisterRoutes",
    "params": "r *gin.Engine, mgr *Manager",
    "doc": "",
    "source_file": "./backend/plugins/api.go"
  },
  {
    "type": "function",
    "name": "installHandler",
    "params": "m *Manager",
    "doc": "",
    "source_file": "./backend/plugins/api.go"
  },
  {
    "type": "function",
    "name": "removeHandler",
    "params": "m *Manager",
    "doc": "",
    "source_file": "./backend/plugins/api.go"
  },
  {
    "type": "function",
    "name": "listHandler",
    "params": "m *Manager",
    "doc": "",
    "source_file": "./backend/plugins/api.go"
  },
  {
    "type": "function",
    "name": "enableHandler",
    "params": "m *Manager",
    "doc": "",
    "source_file": "./backend/plugins/api.go"
  },
  {
    "type": "function",
    "name": "GetUser",
    "params": "username string",
    "doc": "// GetUser retrieves a specific user's configuration",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "AddUser",
    "params": "username string, password string, permissions []string",
    "doc": "// AddUser adds or updates a user in the configuration",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "LoadK8sConfigMap",
    "params": "",
    "doc": "// LoadK8sConfigMap checks if the ConfigMap exists, creates it if not, and returns its data.",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "GetUserByUsername",
    "params": "username string",
    "doc": "// GetUserByUsername retrieves a user configuration by username",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "SaveConfig",
    "params": "config *Config",
    "doc": "// SaveConfig saves the current configuration to the ConfigMap",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "CreateConfigMap",
    "params": "clientset *kubernetes.Clientset",
    "doc": "// CreateConfigMap creates a new ConfigMap with default values.",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "ensureNamespaceExists",
    "params": "clientset *kubernetes.Clientset",
    "doc": "// ensureNamespaceExists checks if the namespace exists and creates it if it doesn't",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "GetAvailablePermissionSets",
    "params": "",
    "doc": "// GetAvailablePermissionSets returns all predefined permission sets",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "AddOrUpdateUser",
    "params": "username, password string, permissions []string",
    "doc": "// AddOrUpdateUser adds a new user or updates an existing user in the configuration",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "AddUserWithPermissionSet",
    "params": "username, password string, permissionSet PermissionSet",
    "doc": "// AddUserWithPermissionSet adds a new user with a predefined permission set",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "RemoveUser",
    "params": "username string",
    "doc": "// RemoveUser removes a user from the configuration",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "UpdateUserPermissions",
    "params": "username string, permissions []string",
    "doc": "// UpdateUserPermissions updates only the permissions for an existing user",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "containsPermission",
    "params": "permissions []string, permission string",
    "doc": "// containsPermission checks if a permission slice contains a specific permission",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "isLastAdminUser",
    "params": "config *Config, username string",
    "doc": "// isLastAdminUser checks if the given username is the last user with admin permissions",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "ListUsers",
    "params": "",
    "doc": "// ListUsers returns a list of all usernames in the configuration",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "ListUsersWithPermissions",
    "params": "",
    "doc": "// ListUsersWithPermissions returns detailed information about all users",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "GetUserPermissions",
    "params": "username string",
    "doc": "// GetUserPermissions gets the permissions for a specific user",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "struct",
    "name": "UserConfig",
    "params": "",
    "doc": "// UserConfig holds configuration for a single user",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "struct",
    "name": "Config",
    "params": "",
    "doc": "// Config struct to hold global and per-user configuration data",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "struct",
    "name": "PermissionSet",
    "params": "",
    "doc": "// PermissionSet represents a predefined set of permissions",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "struct",
    "name": "UserWithPermissions",
    "params": "",
    "doc": "// UserWithPermissions holds a username and its associated permissions",
    "source_file": "./backend/auth/auth.go"
  },
  {
    "type": "function",
    "name": "GetClusterConfigByName",
    "params": "data []byte, clusterName string",
    "doc": "",
    "source_file": "./backend/services/clusterService.go"
  },
  {
    "type": "function",
    "name": "ValidateClusterConnectivity",
    "params": "kubeconfigData []byte",
    "doc": "",
    "source_file": "./backend/services/clusterService.go"
  },
  {
    "type": "function",
    "name": "ImportCluster",
    "params": "cluster models.Cluster",
    "doc": "// ImportCluster imports a cluster into the system",
    "source_file": "./backend/services/clusterService.go"
  },
  {
    "type": "function",
    "name": "HomeDir",
    "params": "",
    "doc": "// HomeDir returns the user's home directory.",
    "source_file": "./backend/its/manual/utils/utils.go"
  },
  {
    "type": "function",
    "name": "GetITSInfo",
    "params": "",
    "doc": "// GetITSInfo retrieves clusters already imported into ITS by querying the managedclusters API.",
    "source_file": "./backend/its/manual/utils/utils.go"
  },
  {
    "type": "function",
    "name": "GetAvailableClusters",
    "params": "",
    "doc": "// that do NOT match the \"*-kubeflex\" pattern and are not already imported into ITS.",
    "source_file": "./backend/its/manual/utils/utils.go"
  },
  {
    "type": "struct",
    "name": "ManagedClusterInfo",
    "params": "",
    "doc": "// ManagedClusterInfo holds details about a managed (imported) cluster.",
    "source_file": "./backend/its/manual/utils/utils.go"
  },
  {
    "type": "struct",
    "name": "ContextInfo",
    "params": "",
    "doc": "// ContextInfo holds basic info for a kubeconfig context.",
    "source_file": "./backend/its/manual/utils/utils.go"
  },
  {
    "type": "function",
    "name": "GetCSRsExecHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/its/manual/handlers/csr_watcher.go"
  },
  {
    "type": "struct",
    "name": "CSR",
    "params": "",
    "doc": "// CSR represents the structure of a single CertificateSigningRequest (simplified).",
    "source_file": "./backend/its/manual/handlers/csr_watcher.go"
  },
  {
    "type": "struct",
    "name": "CSRList",
    "params": "",
    "doc": "// CSRList represents the overall structure returned by \"kubectl get csr -o json\".",
    "source_file": "./backend/its/manual/handlers/csr_watcher.go"
  },
  {
    "type": "function",
    "name": "HomeDir",
    "params": "",
    "doc": "// HomeDir returns the user's home directory.",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "kubeconfigPath",
    "params": "",
    "doc": "",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GetITSInfo",
    "params": "",
    "doc": "",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GetAvailableClusters",
    "params": "",
    "doc": "// GetAvailableClusters reads the kubeconfig and returns available clusters",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GetAvailableClustersHandler",
    "params": "c *gin.Context",
    "doc": "// It returns a filtered list of available clusters (contexts) from the kubeconfig.",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GetKubeInfoHandler",
    "params": "c *gin.Context",
    "doc": "// the current kubeconfig context, and ITS managed cluster data.",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GetKubeInfo",
    "params": "",
    "doc": "// - ITS managed cluster data",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "ImportClusterHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "adjustClusterServerEndpoints",
    "params": "config *clientcmdapi.Config",
    "doc": "",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GetClusterDetailsHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "struct",
    "name": "ManagedClusterInfo",
    "params": "",
    "doc": "// ManagedClusterInfo holds details about a managed (imported) cluster.",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "struct",
    "name": "ContextInfo",
    "params": "",
    "doc": "// ContextInfo holds basic info for a kubeconfig context.",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "struct",
    "name": "ClusterDetails",
    "params": "",
    "doc": "// ClusterDetails holds detailed information about a cluster.",
    "source_file": "./backend/its/manual/handlers/cluster.go"
  },
  {
    "type": "function",
    "name": "GenerateCommandHandler",
    "params": "c *gin.Context",
    "doc": "// and returns them in the response.",
    "source_file": "./backend/its/manual/handlers/command.go"
  },
  {
    "type": "struct",
    "name": "GenerateCommandRequest",
    "params": "",
    "doc": "// GenerateCommandRequest represents the request payload.",
    "source_file": "./backend/its/manual/handlers/command.go"
  },
  {
    "type": "struct",
    "name": "GenerateCommandResponse",
    "params": "",
    "doc": "// GenerateCommandResponse represents the response payload.",
    "source_file": "./backend/its/manual/handlers/command.go"
  },
  {
    "type": "function",
    "name": "LoadConfig",
    "params": "",
    "doc": "",
    "source_file": "./backend/postgresql/config.go"
  },
  {
    "type": "function",
    "name": "ConnectDB",
    "params": "",
    "doc": "",
    "source_file": "./backend/postgresql/config.go"
  },
  {
    "type": "function",
    "name": "setupNamespaceRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/namespace.go"
  },
  {
    "type": "function",
    "name": "setupInstallerRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/installer.go"
  },
  {
    "type": "function",
    "name": "setupArtifactHubRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/artifacthub.go"
  },
  {
    "type": "function",
    "name": "setupDeploymentRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/deployment.go"
  },
  {
    "type": "function",
    "name": "setupGitopsRoutes",
    "params": "router *gin.Engine",
    "doc": "// setupGitopsRoutes registers general GitOps deployment routes",
    "source_file": "./backend/routes/gitops.go"
  },
  {
    "type": "function",
    "name": "setupHelmRoutes",
    "params": "router *gin.Engine",
    "doc": "// setupHelmRoutes registers all Helm chart related routes",
    "source_file": "./backend/routes/gitops.go"
  },
  {
    "type": "function",
    "name": "setupGitHubRoutes",
    "params": "router *gin.Engine",
    "doc": "// setupGitHubRoutes registers all GitHub related routes",
    "source_file": "./backend/routes/gitops.go"
  },
  {
    "type": "function",
    "name": "setupDeploymentHistoryRoutes",
    "params": "router *gin.Engine",
    "doc": "// setupDeploymentHistoryRoutes registers routes for deployment history",
    "source_file": "./backend/routes/gitops.go"
  },
  {
    "type": "function",
    "name": "getWecsResources",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/wecs.go"
  },
  {
    "type": "function",
    "name": "setupAuthRoutes",
    "params": "router *gin.Engine",
    "doc": "// SetupRoutes initializes all application routes",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "setupAdditionalRoutes",
    "params": "router *gin.Engine",
    "doc": "// setupAdditionalRoutes adds any additional route groups",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "LoginHandler",
    "params": "c *gin.Context",
    "doc": "// LoginHandler verifies user credentials and issues JWT",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "CurrentUserHandler",
    "params": "c *gin.Context",
    "doc": "// CurrentUserHandler returns the current user's information",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "ListUsersHandler",
    "params": "c *gin.Context",
    "doc": "// ListUsersHandler returns a list of all users (admin only)",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "CreateUserHandler",
    "params": "c *gin.Context",
    "doc": "// CreateUserHandler creates a new user (admin only)",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "UpdateUserHandler",
    "params": "c *gin.Context",
    "doc": "// UpdateUserHandler updates an existing user (admin only)",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "DeleteUserHandler",
    "params": "c *gin.Context",
    "doc": "// DeleteUserHandler deletes a user (admin only)",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "GetResourcesHandler",
    "params": "c *gin.Context",
    "doc": "// Example handlers for resource endpoints (implement as needed)",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "CreateResourceHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "UpdateResourceHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "DeleteResourceHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/routes/jwt.go"
  },
  {
    "type": "function",
    "name": "setupBindingPolicyRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/bp.go"
  },
  {
    "type": "function",
    "name": "SetupRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/setup.go"
  },
  {
    "type": "function",
    "name": "setupWdsCookiesRoute",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/cookies.go"
  },
  {
    "type": "function",
    "name": "setupClusterRoutes",
    "params": "router *gin.Engine",
    "doc": "",
    "source_file": "./backend/routes/cluster.go"
  },
  {
    "type": "function",
    "name": "setupResourceRoutes",
    "params": "router *gin.Engine",
    "doc": "// SetupRoutes initializes all API routes",
    "source_file": "./backend/routes/resources.go"
  },
  {
    "type": "function",
    "name": "RegisterPluginAPI",
    "params": "r *gin.Engine, installedPath, availablePath string",
    "doc": "",
    "source_file": "./backend/routes/plugins.go"
  },
  {
    "type": "function",
    "name": "installHandler",
    "params": "m *plugins.Manager",
    "doc": "",
    "source_file": "./backend/routes/plugins.go"
  },
  {
    "type": "function",
    "name": "removeHandler",
    "params": "m *plugins.Manager",
    "doc": "",
    "source_file": "./backend/routes/plugins.go"
  },
  {
    "type": "function",
    "name": "listHandler",
    "params": "m *plugins.Manager",
    "doc": "",
    "source_file": "./backend/routes/plugins.go"
  },
  {
    "type": "function",
    "name": "enableHandler",
    "params": "m *plugins.Manager",
    "doc": "",
    "source_file": "./backend/routes/plugins.go"
  },
  {
    "type": "function",
    "name": "availableHandler",
    "params": "m *plugins.Manager, availablePath string",
    "doc": "",
    "source_file": "./backend/routes/plugins.go"
  },
  {
    "type": "function",
    "name": "Get",
    "params": "sessionId string",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "Set",
    "params": "sessionId string, session TerminalSession",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "Close",
    "params": "sessionId string",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "genTerminalSessionId",
    "params": "",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "isValidShellCmd",
    "params": "validShells []string, shell string",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "canI",
    "params": "clientset *kubernetes.Clientset, namespace, verb, resource string",
    "doc": "// canI checks whether the current user can perform verb on resource in namespace.",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "GetAllPodContainersName",
    "params": "c *gin.Context",
    "doc": "// GetAllPodContainersName returns the list of containers in a given pod.",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "startShellProcess",
    "params": "c *gin.Context, clientSet *kubernetes.Clientset, cfg *rest.Config, cmd []string, conn *websocket.Conn, namespace string",
    "doc": "// startShellProcess attaches stdin/stdout/stderr of a shell to the websocket.",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "Write",
    "params": "p []byte",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "HandlePodExecShell",
    "params": "c *gin.Context",
    "doc": "// HandlePodExecShell upgrades to a websocket and either execs a shell or falls back to logs.",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "struct",
    "name": "TerminalSession",
    "params": "",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "struct",
    "name": "TerminalMessage",
    "params": "",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "struct",
    "name": "SessionMap",
    "params": "",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "struct",
    "name": "ContainerInfo",
    "params": "",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "struct",
    "name": "connWriter",
    "params": "",
    "doc": "",
    "source_file": "./backend/wecs/exec.go"
  },
  {
    "type": "function",
    "name": "getCacheKey",
    "params": "dataType string, parts ...string",
    "doc": "// getCacheKey generates a consistent cache key for different data types",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "function",
    "name": "getITSData",
    "params": "",
    "doc": "// getITSData loads kubeconfig and returns managed clusters matching a prefix.",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "function",
    "name": "StreamK8sDataChronologically",
    "params": "c *gin.Context",
    "doc": "// StreamK8sDataChronologically streams Kubernetes data over WebSocket, with Redis caching to prevent disconnections",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "function",
    "name": "getReplicaSetsForDeployment",
    "params": "clientset *kubernetes.Clientset, deployment appsv1.Deployment, namespace string",
    "doc": "// getReplicaSetsForDeployment returns replica sets owned by a deployment with their pods",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "function",
    "name": "getPodsForReplicaSet",
    "params": "clientset *kubernetes.Clientset, rs appsv1.ReplicaSet, namespace string",
    "doc": "// getPodsForReplicaSet returns pods owned by a replica set",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "function",
    "name": "StreamPodLogs",
    "params": "c *gin.Context",
    "doc": "// with Redis caching to prevent disconnections and improve performance.",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "struct",
    "name": "ResourceData",
    "params": "",
    "doc": "// ResourceData contains data for a Kubernetes resource.",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "struct",
    "name": "ResourceTypeData",
    "params": "",
    "doc": "// ResourceTypeData groups resources by their type.",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "struct",
    "name": "NamespaceData",
    "params": "",
    "doc": "// NamespaceData groups resource types by namespace.",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "struct",
    "name": "ClusterData",
    "params": "",
    "doc": "// ClusterData groups namespaces by cluster.",
    "source_file": "./backend/wecs/wecs.go"
  },
  {
    "type": "function",
    "name": "AuthenticateMiddleware",
    "params": "",
    "doc": "// AuthenticateMiddleware validates JWT token",
    "source_file": "./backend/middleware/auth.go"
  },
  {
    "type": "function",
    "name": "RequirePermission",
    "params": "permission string",
    "doc": "// RequirePermission middleware checks if the user has a specific permission",
    "source_file": "./backend/middleware/auth.go"
  },
  {
    "type": "function",
    "name": "RequireAdmin",
    "params": "",
    "doc": "// RequireAdmin middleware checks if the user has admin permissions",
    "source_file": "./backend/middleware/auth.go"
  },
  {
    "type": "function",
    "name": "getCacheKey",
    "params": "context, dataType string, parts ...string",
    "doc": "",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "function",
    "name": "ListAllResourcesByNamespace",
    "params": "c *gin.Context",
    "doc": "// ListAllResourcesByNamespace api/wds/list/:namespace",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "function",
    "name": "ListAllResourcesDetailsSSE",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "function",
    "name": "contains",
    "params": "slice []string, val string",
    "doc": "// if it contains \"list\" then just ignore them",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "function",
    "name": "extractNamespaceDetails",
    "params": "nsName string, nsList []unstructured.Unstructured",
    "doc": "",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "function",
    "name": "extractObjDetails",
    "params": "obj *unstructured.Unstructured",
    "doc": "",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "struct",
    "name": "ResourceListResponse",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "struct",
    "name": "ResourceListResponse",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/list.go"
  },
  {
    "type": "function",
    "name": "Run",
    "params": "ch <-chan struct{}",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "worker",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "processItem",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "handleAdd",
    "params": "obj interface{}",
    "doc": "// will trigger how much deployment you have and when you create new one",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "handleUpdate",
    "params": "oldObj, newObj interface{}",
    "doc": "// most important",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "handleDel",
    "params": "obj interface{}",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "updateLogs",
    "params": "newDeployment, oldDeployment *appsv1.Deployment",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "struct",
    "name": "Controller",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "struct",
    "name": "DeploymentUpdate",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/controller.go"
  },
  {
    "type": "function",
    "name": "homeDir",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "getKubeConfig",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "GetClientSetKubeConfig",
    "params": "",
    "doc": "// only for wds1",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "ListContexts",
    "params": "",
    "doc": "// listContexts lists all available contexts in the kubeconfig (Only look for wds context)",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "writeMessage",
    "params": "conn *websocket.Conn, message string",
    "doc": "",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "SetWdsContextCookies",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "GetWdsContextCookies",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "CreateWDSContextUsingCommand",
    "params": "w http.ResponseWriter, r *http.Request, c *gin.Context",
    "doc": "// DOCS: https://github.com/kubestellar/kubestellar/blob/main/docs/content/direct/core-chart.md",
    "source_file": "./backend/wds/common.go"
  },
  {
    "type": "function",
    "name": "GetDeploymentStatus",
    "params": "c *gin.Context",
    "doc": "// Get deployment status by name",
    "source_file": "./backend/wds/deployment/status.go"
  },
  {
    "type": "function",
    "name": "GetDeploymentByName",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/wds/deployment/details.go"
  },
  {
    "type": "function",
    "name": "GetWDSWorkloads",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/wds/deployment/details.go"
  },
  {
    "type": "struct",
    "name": "WorkloadInfo",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/deployment/details.go"
  },
  {
    "type": "function",
    "name": "HandleDeploymentLogs",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "",
    "source_file": "./backend/wds/deployment/logs.go"
  },
  {
    "type": "function",
    "name": "sendInitialLogs",
    "params": "conn *websocket.Conn, clientset *kubernetes.Clientset, namespace, deploymentName string",
    "doc": "",
    "source_file": "./backend/wds/deployment/logs.go"
  },
  {
    "type": "function",
    "name": "watchDeploymentWithInformer",
    "params": "conn *websocket.Conn, clientset *kubernetes.Clientset, namespace, deploymentName string",
    "doc": "",
    "source_file": "./backend/wds/deployment/logs.go"
  },
  {
    "type": "function",
    "name": "updateHandler",
    "params": "conn *websocket.Conn, oldDeployment, newDeployment *v1.Deployment",
    "doc": "",
    "source_file": "./backend/wds/deployment/logs.go"
  },
  {
    "type": "function",
    "name": "getDeploymentLogs",
    "params": "deployment *v1.Deployment",
    "doc": "",
    "source_file": "./backend/wds/deployment/logs.go"
  },
  {
    "type": "struct",
    "name": "DeploymentUpdate",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/deployment/logs.go"
  },
  {
    "type": "function",
    "name": "getClientForBp",
    "params": "",
    "doc": "// getClientForBp creates a new client for BindingPolicy operations",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "getBpObjFromYaml",
    "params": "bpRawYamlBytes []byte",
    "doc": "// get BP struct from YAML",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "containsAny",
    "params": "s string, substrings []string",
    "doc": "// Helper function to check if a string contains any of the given substrings",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "extractWorkloads",
    "params": "bp *v1alpha1.BindingPolicy",
    "doc": "// extractWorkloads gets a list of workloads affected by this BP",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "extractTargetClusters",
    "params": "bp *v1alpha1.BindingPolicy",
    "doc": "// extractTargetClusters extracts the list of target clusters from ClusterSelectors",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "filterBPsByNamespace",
    "params": "bps []BindingPolicyWithStatus, namespace string",
    "doc": "// filterBPsByNamespace filters the binding policies by namespace",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "contentTypeValid",
    "params": "t string",
    "doc": "// check if content type is valid",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "watchOnBps",
    "params": "",
    "doc": "// watches on all binding policy resources , PROTOTYPE just for now",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "init",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/utils.go"
  },
  {
    "type": "function",
    "name": "GetAllBp",
    "params": "ctx *gin.Context",
    "doc": "// GetAllBp retrieves all BindingPolicies with enhanced information",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "CreateBp",
    "params": "ctx *gin.Context",
    "doc": "// CreateBp creates a new BindingPolicy",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "DeleteBp",
    "params": "ctx *gin.Context",
    "doc": "// DeleteBp deletes a BindingPolicy by name and namespace",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "DeleteAllBp",
    "params": "ctx *gin.Context",
    "doc": "// DeleteAllBp deletes all BindingPolicies",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "GetBpStatus",
    "params": "ctx *gin.Context",
    "doc": "// GetBpStatus retrieves the status of a specific BindingPolicy",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "UpdateBp",
    "params": "ctx *gin.Context",
    "doc": "// Updates the Binding policy with the given name, Assuming that it exists",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "CreateBpFromJson",
    "params": "ctx *gin.Context",
    "doc": "// CreateBpFromJson creates a new BindingPolicy from JSON data sent by the UI",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "contains",
    "params": "slice []string, str string",
    "doc": "// Helper function to check if a string is in a slice",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "CreateQuickBindingPolicy",
    "params": "ctx *gin.Context",
    "doc": "// CreateQuickBindingPolicy creates a simple binding policy connecting workload(s) to cluster(s)",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "getFirstMapEntry",
    "params": "m map[string]string",
    "doc": "// Helper function to get the first key-value pair from a map",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "GenerateQuickBindingPolicyYAML",
    "params": "ctx *gin.Context",
    "doc": "// without actually creating the policy",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "getMapKeys",
    "params": "m map[string]interface{}",
    "doc": "// Helper function to get map keys",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "isKubernetesBuiltInResource",
    "params": "resource string",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "getCRDNamesFromResources",
    "params": "resourceAPIGroups map[string]string",
    "doc": "// Helper function to get CRD full names from resource types and API groups",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "StoredBindingPolicy",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "WorkloadInfo",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "BindingPolicyWithStatus",
    "params": "",
    "doc": "// BindingPolicyWithStatus adds status information to the BindingPolicy",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "BindingPolicyRequest",
    "params": "",
    "doc": "// Define a struct to parse the incoming JSON data",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "policyMatchLabels",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "policyDownsyncRule",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "ResourceConfig",
    "params": "",
    "doc": "// Define a struct to parse the quick connection request",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "QuickBindingPolicyRequest",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "ResourceConfig",
    "params": "",
    "doc": "// Define a struct to parse the request - same as CreateQuickBindingPolicy",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "struct",
    "name": "QuickBindingPolicyRequest",
    "params": "",
    "doc": "",
    "source_file": "./backend/wds/bp/handlers.go"
  },
  {
    "type": "function",
    "name": "LoadConfig",
    "params": "",
    "doc": "// LoadConfig loads environment variables from .env file",
    "source_file": "./backend/jwt/config.go"
  },
  {
    "type": "function",
    "name": "GetJWTSecret",
    "params": "",
    "doc": "// GetJWTSecret returns the JWT secret from environment",
    "source_file": "./backend/jwt/config.go"
  },
  {
    "type": "function",
    "name": "SetJWTSecret",
    "params": "secret string",
    "doc": "// SetJWTSecret sets the JWT secret in environment",
    "source_file": "./backend/jwt/config.go"
  },
  {
    "type": "function",
    "name": "GetTokenExpiration",
    "params": "",
    "doc": "// GetTokenExpiration returns the token expiration duration",
    "source_file": "./backend/jwt/config.go"
  },
  {
    "type": "function",
    "name": "GetRefreshTokenExpiration",
    "params": "",
    "doc": "// GetRefreshTokenExpiration returns the refresh token expiration duration",
    "source_file": "./backend/jwt/config.go"
  },
  {
    "type": "function",
    "name": "InitializeDefaultConfig",
    "params": "",
    "doc": "// InitializeDefaultConfig sets default configuration if not already set",
    "source_file": "./backend/jwt/config.go"
  },
  {
    "type": "struct",
    "name": "Namespace",
    "params": "",
    "doc": "",
    "source_file": "./backend/models/namespace.go"
  },
  {
    "type": "function",
    "name": "AuthenticateUser",
    "params": "username, password string",
    "doc": "// AuthenticateUser authenticates a user against the ConfigMap data",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "function",
    "name": "HasPermission",
    "params": "permission string",
    "doc": "// HasPermission checks if a user has a specific permission",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "function",
    "name": "HasAnyPermission",
    "params": "permissions ...string",
    "doc": "// HasAnyPermission checks if the user has any of the specified permissions",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "function",
    "name": "HasAllPermissions",
    "params": "permissions ...string",
    "doc": "// HasAllPermissions checks if the user has all of the specified permissions",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "function",
    "name": "IsAdmin",
    "params": "",
    "doc": "// IsAdmin checks if the user has admin permissions",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "struct",
    "name": "User",
    "params": "",
    "doc": "",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "struct",
    "name": "Config",
    "params": "",
    "doc": "// Config struct to hold data from ConfigMap",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "struct",
    "name": "User",
    "params": "",
    "doc": "// User represents an authenticated user with permissions",
    "source_file": "./backend/models/user.go"
  },
  {
    "type": "struct",
    "name": "ClusterStatus",
    "params": "",
    "doc": "",
    "source_file": "./backend/models/cluster.go"
  },
  {
    "type": "struct",
    "name": "Cluster",
    "params": "",
    "doc": "",
    "source_file": "./backend/models/cluster.go"
  },
  {
    "type": "struct",
    "name": "OnboardingEvent",
    "params": "",
    "doc": "",
    "source_file": "./backend/models/cluster.go"
  },
  {
    "type": "struct",
    "name": "OnboardingResponse",
    "params": "",
    "doc": "// OnboardingResponse represents the response from the onboarding endpoint",
    "source_file": "./backend/models/cluster.go"
  },
  {
    "type": "struct",
    "name": "OnboardingLogsResponse",
    "params": "",
    "doc": "// OnboardingLogsResponse represents the response from the logs endpoint",
    "source_file": "./backend/models/cluster.go"
  },
  {
    "type": "struct",
    "name": "StatusResponse",
    "params": "",
    "doc": "// StatusResponse represents the response from the status endpoint",
    "source_file": "./backend/models/cluster.go"
  },
  {
    "type": "function",
    "name": "fetchGitHubYAMLs",
    "params": "repoURL, folderPath, branch, gitUsername, gitToken string",
    "doc": "// Fetches YAML files from a GitHub repository directory without cloning",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "function",
    "name": "DeployHandler",
    "params": "c *gin.Context",
    "doc": "// DeployHandler handles deployment requests",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "function",
    "name": "GitHubWebhookHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "function",
    "name": "CreateHelmActionConfig",
    "params": "namespace string",
    "doc": "// createHelmActionConfig initializes the Helm action configuration using WDS1 context",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "struct",
    "name": "DeployRequest",
    "params": "",
    "doc": "",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "struct",
    "name": "GitHubContentResponse",
    "params": "",
    "doc": "// GitHubContentResponse represents the GitHub API response for a file's content",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "struct",
    "name": "GitHubWebhookPayload",
    "params": "",
    "doc": "// GitHubWebhookPayload defines the expected structure of the webhook request",
    "source_file": "./backend/api/deploy.go"
  },
  {
    "type": "function",
    "name": "WSOnboardingHandler",
    "params": "c *gin.Context",
    "doc": "// WSOnboardingHandler handles WebSocket connections for streaming onboarding logs",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "LogOnboardingEvent",
    "params": "clusterName, status, message string",
    "doc": "// LogOnboardingEvent adds an event to the log and broadcasts it to all connected clients",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "RegisterOnboardingStart",
    "params": "clusterName string",
    "doc": "// RegisterOnboardingStart marks a cluster as being onboarded and logs the initial event",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "RegisterOnboardingComplete",
    "params": "clusterName string, err error",
    "doc": "// RegisterOnboardingComplete marks a cluster as finished onboarding and logs the completion event",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "registerClient",
    "params": "clusterName string, ws *websocket.Conn",
    "doc": "// Helper functions for client management",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "unregisterClient",
    "params": "clusterName string, ws *websocket.Conn",
    "doc": "",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "broadcastEvent",
    "params": "clusterName string, event OnboardingEvent",
    "doc": "",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "ClearOnboardingEvents",
    "params": "clusterName string",
    "doc": "// ClearOnboardingEvents clears all events for a specific cluster",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "GetOnboardingEvents",
    "params": "clusterName string",
    "doc": "// GetOnboardingEvents returns all events for a specific cluster",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "struct",
    "name": "OnboardingEvent",
    "params": "",
    "doc": "// OnboardingEvent represents a single event in the onboarding process",
    "source_file": "./backend/api/cluster_socket.go"
  },
  {
    "type": "function",
    "name": "CheckKubeStellarStatusHandler",
    "params": "c *gin.Context",
    "doc": "// CheckKubeStellarStatusHandler checks if KubeStellar is installed and returns status",
    "source_file": "./backend/api/status_handler.go"
  },
  {
    "type": "function",
    "name": "GetManagedClustersHandler",
    "params": "c *gin.Context",
    "doc": "// GetManagedClustersHandler returns a list of all managed clusters",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "function",
    "name": "GetManagedClusterHandler",
    "params": "c *gin.Context",
    "doc": "// GetManagedClusterHandler returns details of a specific managed cluster",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "function",
    "name": "listManagedClusters",
    "params": "client dynamic.Interface, gvr schema.GroupVersionResource",
    "doc": "// listManagedClusters uses the dynamic client to list all managed clusters",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "function",
    "name": "getManagedCluster",
    "params": "client dynamic.Interface, gvr schema.GroupVersionResource, name string",
    "doc": "// getManagedCluster uses the dynamic client to get a specific managed cluster",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "function",
    "name": "extractClusterInfo",
    "params": "obj *unstructured.Unstructured",
    "doc": "// extractClusterInfo extracts relevant information from an unstructured managed cluster",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "struct",
    "name": "ManagedClusterCondition",
    "params": "",
    "doc": "// ManagedClusterCondition represents a condition of a managed cluster",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "struct",
    "name": "ManagedClusterStatus",
    "params": "",
    "doc": "// ManagedClusterStatus represents the status of a managed cluster",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "struct",
    "name": "ManagedClusterInfo",
    "params": "",
    "doc": "// ManagedClusterInfo contains key information about a managed cluster",
    "source_file": "./backend/api/manage_clusters.go"
  },
  {
    "type": "function",
    "name": "CheckPrerequisitesHandler",
    "params": "c *gin.Context",
    "doc": "// CheckPrerequisitesHandler checks if all prerequisites are installed",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "function",
    "name": "InstallHandler",
    "params": "c *gin.Context",
    "doc": "// InstallHandler handles the KubeStellar installation request",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "function",
    "name": "GetLogsHandler",
    "params": "c *gin.Context",
    "doc": "// GetLogsHandler returns the logs for a specific installation",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "function",
    "name": "handleWindowsInstall",
    "params": "c *gin.Context, req InstallationRequest",
    "doc": "// handleWindowsInstall provides instructions for Windows users",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "function",
    "name": "getWindowsKubeflexInstructions",
    "params": "",
    "doc": "// getWindowsKubeflexInstructions provides kubeflex installation instructions for Windows",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "struct",
    "name": "InstallationRequest",
    "params": "",
    "doc": "// InstallationRequest represents the installation request parameters",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "struct",
    "name": "InstallationResponse",
    "params": "",
    "doc": "// InstallationResponse represents the response after installation request",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "struct",
    "name": "WindowsInstructions",
    "params": "",
    "doc": "// WindowsInstructions represents instructions for Windows users",
    "source_file": "./backend/api/installer.go"
  },
  {
    "type": "function",
    "name": "DetachClusterHandler",
    "params": "c *gin.Context",
    "doc": "// DetachClusterHandler handles HTTP requests to detach a cluster",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "DetachCluster",
    "params": "clusterName string",
    "doc": "// DetachCluster handles the process of detaching a cluster from the OCM hub",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "checkManagedClusterExists",
    "params": "clientset *kubernetes.Clientset, clusterName string",
    "doc": "// checkManagedClusterExists checks if a managed cluster exists in the OCM hub",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "executeDetachCommand",
    "params": "itsContext, clusterName string",
    "doc": "// executeDetachCommand executes the detachment operation using the Kubernetes SDK",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "waitForClusterRemoval",
    "params": "clientset *kubernetes.Clientset, clusterName string",
    "doc": "// waitForClusterRemoval waits for the cluster to be removed from the OCM hub",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "GetDetachmentLogsHandler",
    "params": "c *gin.Context",
    "doc": "// GetDetachmentLogsHandler returns all logs for a specific cluster's detachment process",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "HandleDetachmentWebSocket",
    "params": "c *gin.Context",
    "doc": "// HandleDetachmentWebSocket handles websocket connections for detachment logs",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "handleWebSocketClose",
    "params": "client *WebSocketClient",
    "doc": "// handleWebSocketClose handles the closing of a websocket connection",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "BroadcastDetachmentEvent",
    "params": "clusterName, status, message string",
    "doc": "// BroadcastDetachmentEvent sends an event to all websocket clients for a specific cluster",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "BroadcastStatusChange",
    "params": "clusterName, status string",
    "doc": "// BroadcastStatusChange sends a status change event to all websocket clients for a specific cluster",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "struct",
    "name": "WebSocketClient",
    "params": "",
    "doc": "",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "struct",
    "name": "WebSocketEvent",
    "params": "",
    "doc": "// WebSocketEvent represents an event to be sent over the websocket",
    "source_file": "./backend/api/detach.go"
  },
  {
    "type": "function",
    "name": "LogsWebSocketHandler",
    "params": "c *gin.Context",
    "doc": "// LogsWebSocketHandler handles WebSocket connections for real-time logs",
    "source_file": "./backend/api/installer-websocket.go"
  },
  {
    "type": "function",
    "name": "OnboardingLogsHandler",
    "params": "c *gin.Context",
    "doc": "// OnboardingLogsHandler returns all logs for a specific cluster's onboarding process",
    "source_file": "./backend/api/cluster_logs.go"
  },
  {
    "type": "function",
    "name": "DeployFromArtifactHub",
    "params": "c *gin.Context",
    "doc": "// DeployFromArtifactHub deploys a Helm chart directly from Artifact Hub",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "SearchArtifactHub",
    "params": "c *gin.Context",
    "doc": "// SearchArtifactHub searches for packages on Artifact Hub",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "GetArtifactHubPackageInfo",
    "params": "c *gin.Context",
    "doc": "// GetArtifactHubPackageInfo retrieves detailed information about a specific package",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "ListArtifactHubRepositories",
    "params": "c *gin.Context",
    "doc": "// ListArtifactHubRepositories lists available repositories from Artifact Hub",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "getArtifactHubPackageDetails",
    "params": "repoType, orgName, chartName, version string",
    "doc": "// Helper function to get package details from Artifact Hub API",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "GetArtifactHubPackageValues",
    "params": "c *gin.Context",
    "doc": "// GetArtifactHubPackageValues retrieves the default values.yaml for a specific package version",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "extractRepositories",
    "params": "packages []ArtifactHubPackage",
    "doc": "// Helper function to extract unique repositories from search results",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "extractKinds",
    "params": "packages []ArtifactHubPackage",
    "doc": "// Helper function to extract unique kinds from search results",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "extractLicenses",
    "params": "packages []ArtifactHubPackage",
    "doc": "// Helper function to extract unique licenses from search results",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "SearchArtifactHubAdvance",
    "params": "c *gin.Context",
    "doc": "// SearchArtifactHub searches for packages on Artifact Hub with full details",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "GetArtifactHubPackageAdvanceDetails",
    "params": "c *gin.Context",
    "doc": "// GetArtifactHubPackageAdvanceDetails retrieves comprehensive details for a specific package with all metadata",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "getEnhancedArtifactHubPackageDetails",
    "params": "repoType, orgName, chartName, version string",
    "doc": "// Helper function to get enhanced package details from Artifact Hub API",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "getPackageVersions",
    "params": "repoType, orgName, chartName string",
    "doc": "// Helper function to get all available versions of a package",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "getInstallationInstructions",
    "params": "repoType, orgName, chartName, version string",
    "doc": "// Helper function to get installation instructions",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "getRelatedPackages",
    "params": "packageID string",
    "doc": "// Helper function to get related packages",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "struct",
    "name": "ArtifactHubPackage",
    "params": "",
    "doc": "// First, let's define a simplified package struct for the helper functions",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "struct",
    "name": "ArtifactHubPackageDetails",
    "params": "",
    "doc": "// ArtifactHubPackageDetails represents detailed package information from Artifact Hub API",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "struct",
    "name": "ArtifactHubDeployRequest",
    "params": "",
    "doc": "// ArtifactHubDeployRequest represents the request payload for deploying from Artifact Hub",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "struct",
    "name": "ArtifactHubSearchRequest",
    "params": "",
    "doc": "// ArtifactHubSearchRequest represents search parameters for Artifact Hub",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "struct",
    "name": "EnhancedArtifactHubPackageDetails",
    "params": "",
    "doc": "// EnhancedArtifactHubPackageDetails with all available details",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "struct",
    "name": "ArtifactHubSearchResponse",
    "params": "",
    "doc": "// Updated ArtifactHubSearchResponse using the package struct",
    "source_file": "./backend/api/artifact.go"
  },
  {
    "type": "function",
    "name": "OnboardClusterHandler",
    "params": "c *gin.Context",
    "doc": "// OnboardClusterHandler handles HTTP requests to onboard a new cluster",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "getClusterConfigFromLocal",
    "params": "clusterName string",
    "doc": "// getClusterConfigFromLocal extracts a specific cluster's config from the local kubeconfig file",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "approveClusterCSRs",
    "params": "clientset *kubernetes.Clientset, clusterName string",
    "doc": "// approveClusterCSRs finds and approves any pending CSRs for the specified cluster",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "isCSRApproved",
    "params": "csr certificatesv1.CertificateSigningRequest",
    "doc": "// Helper function to check if a CSR is already approved",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "extractContextConfig",
    "params": "config *clientcmdapi.Config, contextName string",
    "doc": "// extractContextConfig creates a kubeconfig file for a specific context",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "waitForManagedClusterCreation",
    "params": "clientset *kubernetes.Clientset, clusterName string, timeout time.Duration",
    "doc": "// Wait for the managed cluster to be created",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "acceptManagedCluster",
    "params": "clientset *kubernetes.Clientset, clusterName string",
    "doc": "// Updated acceptManagedCluster function with retry logic",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "GetClusterStatusHandler",
    "params": "c *gin.Context",
    "doc": "// GetClusterStatusHandler returns the status of all onboarded clusters",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "UpdateManagedClusterLabelsHandler",
    "params": "c *gin.Context",
    "doc": "// UpdateManagedClusterLabelsHandler updates labels for a managed cluster",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "waitForAndApproveCSR",
    "params": "clientset *kubernetes.Clientset, clusterName string",
    "doc": "// waitForAndApproveCSR waits for and approves the CSR using clusteradm and SDK fallback",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "waitForManagedCluster",
    "params": "clientset *kubernetes.Clientset, clusterName string",
    "doc": "// waitForManagedCluster waits for the managed cluster to be created and accepts it",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "OnboardCluster",
    "params": "kubeconfigData []byte, clusterName string",
    "doc": "// OnboardCluster handles the entire process of onboarding a cluster",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "ValidateClusterConnectivity",
    "params": "kubeconfigData []byte",
    "doc": "// ValidateClusterConnectivity checks if the cluster is accessible",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "getClusterAdmToken",
    "params": "hubContext string",
    "doc": "// getClusterAdmToken retrieves the join token using clusteradm",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "createTempKubeconfig",
    "params": "kubeconfigData []byte, clusterName string",
    "doc": "// createTempKubeconfig creates a temporary kubeconfig file",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "adjustClusterServerEndpoints",
    "params": "config *clientcmdapi.Config",
    "doc": "// adjustClusterServerEndpoints replaces localhost with proper names",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "joinClusterToHub",
    "params": "kubeconfigPath, clusterName, joinToken string",
    "doc": "// joinClusterToHub applies the join command to the target cluster",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "UpdateManagedClusterLabels",
    "params": "clientset *kubernetes.Clientset, config *rest.Config, clusterName string, newLabels map[string]string",
    "doc": "// UpdateManagedClusterLabels updates labels for a managed cluster",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "kubeconfigPath",
    "params": "",
    "doc": "// kubeconfigPath returns the path to the kubeconfig file",
    "source_file": "./backend/api/handlers.go"
  },
  {
    "type": "function",
    "name": "HasContextPrefix",
    "params": "namespace string",
    "doc": "// HasContextPrefix checks if a namespace has a context prefix",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "AddContextPrefix",
    "params": "namespace string, contextName string",
    "doc": "// AddContextPrefix adds a context prefix to a namespace if needed",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "CreateNamespaceWithContext",
    "params": "contextName string, namespace models.Namespace",
    "doc": "// CreateNamespaceWithContext creates a new namespace in the specified context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "UpdateNamespaceWithContext",
    "params": "contextName string, namespaceName string, labels map[string]string",
    "doc": "// UpdateNamespaceWithContext updates namespace labels in the specified context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "DeleteNamespaceWithContext",
    "params": "contextName string, namespaceName string",
    "doc": "// DeleteNamespaceWithContext removes a namespace from the specified context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetNamespaceResourcesWithContext",
    "params": "contextName string, namespace string",
    "doc": "// GetNamespaceResourcesWithContext fetches resources with context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetResourcesInitialState",
    "params": "namespace string, gvr schema.GroupVersionResource, dynamicClient dynamic.Interface, contextName string",
    "doc": "// GetResourcesInitialState fetches the initial state of resources",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "getFilteredNamespacedResourcesWithContext",
    "params": "clientset kubernetes.Interface",
    "doc": "// getFilteredNamespacedResourcesWithContext returns a filtered list of resources to query with context support",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetAllNamespacesWithContext",
    "params": "contextName string",
    "doc": "// GetAllNamespacesWithContext retrieves all namespaces with their resources for a specific context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "fetchNamespaceResourcesWithRetryAndContext",
    "params": "namespace string, contextName string",
    "doc": "// fetchNamespaceResourcesWithRetryAndContext fetches resources with exponential backoff and context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "getLatestNamespaceDataWithContext",
    "params": "contextName string",
    "doc": "// getLatestNamespaceDataWithContext gets the latest namespace data with context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "getMinimalNamespaceDataWithContext",
    "params": "contextName string",
    "doc": "// getMinimalNamespaceDataWithContext gets just namespace names with context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "MultiContextWebSocketHandler",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// MultiContextWebSocketHandler handles WebSocket connections with support for multiple contexts",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "CreateNamespace",
    "params": "namespace models.Namespace",
    "doc": "// CreateNamespace creates a new namespace using default context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetAllNamespaces",
    "params": "",
    "doc": "// GetAllNamespaces fetches all namespaces along with their pods using default context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "UpdateNamespace",
    "params": "namespaceName string, labels map[string]string",
    "doc": "// UpdateNamespace updates namespace labels using default context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "DeleteNamespace",
    "params": "name string",
    "doc": "// DeleteNamespace removes a namespace using default context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetAllNamespacesWithResources",
    "params": "",
    "doc": "// GetAllNamespacesWithResources retrieves all namespaces with their resources using default context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetNamespaceResources",
    "params": "namespace string",
    "doc": "// GetNamespaceResources fetches resources for a namespace using discovery API with default context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "NamespaceWebSocketHandler",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// NamespaceWebSocketHandler handles WebSocket connections with real-time updates",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetAllContextNamespaces",
    "params": "",
    "doc": "// GetAllContextNamespaces returns namespaces from all available contexts",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "MultiContextNamespaceWebSocketHandler",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// MultiContextNamespaceWebSocketHandler sends updates from all contexts",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "WatchAllContextsNamespaces",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// / WatchAllContextsNamespaces watches namespaces across all contexts",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "int64Ptr",
    "params": "i int64",
    "doc": "// Helper function to create a pointer to int64",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "shouldHideNamespace",
    "params": "name string",
    "doc": "// shouldHideNamespace returns true if a namespace should be hidden from the UI",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "getLatestNamespaceData",
    "params": "",
    "doc": "// getLatestNamespaceData tries multiple ways to get namespace data",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "getMinimalNamespaceData",
    "params": "",
    "doc": "// getMinimalNamespaceData gets just namespace names without heavy resource details",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "WatchNamespaceInContext",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// WatchNamespaceInContext sets up watch for resources in a namespace in a specific context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "sendErrorMsg",
    "params": "conn *websocket.Conn, errorMsg string",
    "doc": "// Helper functions for WebSocket messaging",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "sendJsonMessage",
    "params": "conn *websocket.Conn, message interface{}",
    "doc": "",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "processWatchEvents",
    "params": "ctx context.Context, conn *websocket.Conn, events <-chan map[string]interface{}",
    "doc": "// processWatchEvents handles events from watchers and sends them to the client",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "isHighFrequencyResource",
    "params": "resourceKey string",
    "doc": "// Helper functions to categorize resources by update frequency",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "isMediumFrequencyResource",
    "params": "resourceKey string",
    "doc": "",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "shouldSkipResource",
    "params": "resourceKey string",
    "doc": "// shouldSkipResource returns true for resources that should be skipped to avoid throttling",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "containsVerb",
    "params": "verbs []string, verb string",
    "doc": "// containsVerb checks if a verb is in the list of verbs",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetAllContextsNamespaces",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// GetAllContextsNamespaces fetches namespace information from all available contexts simultaneously",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetContextNamespace",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// GetContextNamespace gets details about a specific namespace in a specified context",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "GetMultiContextNamespaceComparison",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// GetMultiContextNamespaceComparison compares the same namespace across multiple contexts",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "SynchronizeNamespace",
    "params": "w http.ResponseWriter, r *http.Request",
    "doc": "// SynchronizeNamespace ensures a namespace has the same configuration across contexts",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "struct",
    "name": "NamespaceDetails",
    "params": "",
    "doc": "// NamespaceDetails holds namespace information and resources",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "struct",
    "name": "ExtendedNamespaceDetails",
    "params": "",
    "doc": "// ExtendedNamespaceDetails adds extra information to NamespaceDetails",
    "source_file": "./backend/namespace/namespace.go"
  },
  {
    "type": "function",
    "name": "CreateNamespace",
    "params": "c *gin.Context",
    "doc": "// createNamespace handles creating a new namespace",
    "source_file": "./backend/namespace/resources/service.go"
  },
  {
    "type": "function",
    "name": "GetAllNamespaces",
    "params": "c *gin.Context",
    "doc": "// getAllNamespaces retrieves all namespaces with their pods",
    "source_file": "./backend/namespace/resources/service.go"
  },
  {
    "type": "function",
    "name": "GetNamespaceDetails",
    "params": "c *gin.Context",
    "doc": "// getNamespaceDetails retrieves detailed information about a specific namespace",
    "source_file": "./backend/namespace/resources/service.go"
  },
  {
    "type": "function",
    "name": "UpdateNamespace",
    "params": "c *gin.Context",
    "doc": "// updateNamespace handles updating labels of an existing namespace",
    "source_file": "./backend/namespace/resources/service.go"
  },
  {
    "type": "function",
    "name": "DeleteNamespace",
    "params": "c *gin.Context",
    "doc": "// deleteNamespace handles deleting a namespace",
    "source_file": "./backend/namespace/resources/service.go"
  },
  {
    "type": "function",
    "name": "NamespaceWebSocketHandler",
    "params": "c *gin.Context",
    "doc": "// WebSocketHandler sends real-time updates on namespaces",
    "source_file": "./backend/namespace/resources/service.go"
  },
  {
    "type": "function",
    "name": "homeDir",
    "params": "",
    "doc": "// homeDir retrieves the user's home directory",
    "source_file": "./backend/k8s/client.go"
  },
  {
    "type": "function",
    "name": "GetClientSet",
    "params": "",
    "doc": "// GetClientSet retrieves a Kubernetes clientset and dynamic client",
    "source_file": "./backend/k8s/client.go"
  },
  {
    "type": "function",
    "name": "GetClientSetWithContext",
    "params": "contextName string",
    "doc": "// GetClientSetWithContext retrieves a Kubernetes clientset and dynamic client for a specified context",
    "source_file": "./backend/k8s/client.go"
  },
  {
    "type": "function",
    "name": "GetClientSetWithConfigContext",
    "params": "contextName string",
    "doc": "",
    "source_file": "./backend/k8s/client.go"
  },
  {
    "type": "function",
    "name": "getResourceGVR",
    "params": "discoveryClient discovery.DiscoveryInterface, kind string",
    "doc": "// getResourceGVR dynamically fetches the correct GroupVersionResource (GVR) using the Discovery API",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "DeployManifests",
    "params": "deployPath string, dryRun bool, dryRunStrategy string, workloadLabel string",
    "doc": "// and adds the specified workload label to all resources",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "EnsureNamespaceExists",
    "params": "dynamicClient dynamic.Interface, namespace string, workloadLabel string",
    "doc": "// Now applies the workload label to namespaces if provided",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "applyOrCreateResource",
    "params": "dynamicClient dynamic.Interface, gvr schema.GroupVersionResource, obj *unstructured.Unstructured, namespace string, dryRun bool, dryRunStrategy string",
    "doc": "// applyOrCreateResource applies or simulates applying a Kubernetes resource",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "PrettyPrint",
    "params": "tree *DeploymentTree",
    "doc": "// PrettyPrint prints JSON formatted output of DeploymentTree",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "StoreManifestsDeployment",
    "params": "data map[string]string",
    "doc": "// Store Manifests deployment data to a ConfigMap",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "storeConfigMapData",
    "params": "configMapName string, data map[string]string",
    "doc": "// storeConfigMapData creates or updates a ConfigMap with the provided data",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetConfigMapData",
    "params": "contextName string, configMapName string",
    "doc": "// GetConfigMapData retrieves data from a ConfigMap",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "mustMarshalToString",
    "params": "obj interface{}",
    "doc": "// Helper function to marshal an object to JSON string",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "StoreHelmDeployment",
    "params": "deploymentData map[string]string",
    "doc": "// StoreHelmDeployment stores Helm deployment data as a new entry in a multi-deployment ConfigMap",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "StoreGitHubDeployment",
    "params": "deploymentData map[string]string",
    "doc": "",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetGithubDeployments",
    "params": "contextName string",
    "doc": "",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetHelmDeployments",
    "params": "contextName string",
    "doc": "// GetHelmDeployments retrieves all stored Helm deployments",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetHelmDeploymentByID",
    "params": "contextName, deploymentID string",
    "doc": "// GetHelmDeploymentByID retrieves a specific Helm deployment by its ID",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetHelmDeploymentsByRelease",
    "params": "contextName, releaseName string",
    "doc": "// GetHelmDeploymentsByRelease retrieves all deployments for a specific release name",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetHelmDeploymentsByNamespace",
    "params": "contextName, namespace string",
    "doc": "// GetHelmDeploymentsByNamespace retrieves all deployments in a specific namespace",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "DeployHelmChart",
    "params": "req HelmDeploymentRequest, store bool",
    "doc": "",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "Run",
    "params": "renderedManifests *bytes.Buffer",
    "doc": "// Run implements the PostRenderer interface and adds the kubestellar.io/workload label to all resources",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "HelmDeployHandler",
    "params": "c *gin.Context",
    "doc": "// HelmDeployHandler handles API requests to deploy Helm charts",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "ListGithubDeployments",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "ListHelmDeploymentsHandler",
    "params": "c *gin.Context",
    "doc": "// ListHelmDeploymentsHandler handles API requests to list all Helm deployments",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "ListGithubDeploymentsHandler",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "GetHelmDeploymentHandler",
    "params": "c *gin.Context",
    "doc": "// GetHelmDeploymentHandler handles API requests to get a specific Helm deployment by ID",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "ListHelmDeploymentsByNamespaceHandler",
    "params": "c *gin.Context",
    "doc": "// ListHelmDeploymentsByNamespaceHandler handles API requests to list deployments by namespace",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "ListHelmDeploymentsByReleaseHandler",
    "params": "c *gin.Context",
    "doc": "// ListHelmDeploymentsByReleaseHandler handles API requests to list deployments by release name",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "DeleteHelmDeploymentByID",
    "params": "contextName, deploymentID string",
    "doc": "// DeleteHelmDeploymentByID deletes a specific Helm deployment by its ID",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "DeleteGitHubDeploymentByID",
    "params": "contextName, deploymentID string",
    "doc": "// DeleteGitHubDeploymentByID deletes a specific GitHub deployment by its ID",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "DeleteHelmDeploymentHandler",
    "params": "c *gin.Context",
    "doc": "// DeleteHelmDeploymentHandler handles API requests to delete a specific Helm deployment by ID",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "DeleteGitHubDeploymentHandler",
    "params": "c *gin.Context",
    "doc": "// DeleteGitHubDeploymentHandler handles API requests to delete a specific GitHub deployment by ID",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "struct",
    "name": "DeploymentTree",
    "params": "",
    "doc": "// DeploymentTree represents the hierarchical response of deployed resources",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "struct",
    "name": "HelmDeploymentRequest",
    "params": "",
    "doc": "// HelmDeploymentRequest represents the request payload for deploying a Helm chart",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "struct",
    "name": "HelmDeploymentData",
    "params": "",
    "doc": "// HelmDeploymentData represents data about a Helm deployment to be stored",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "struct",
    "name": "ConfigMapRef",
    "params": "",
    "doc": "// ConfigMapRef represents a reference to a ConfigMap for chart values",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "struct",
    "name": "chartResult",
    "params": "",
    "doc": "// Locate and load chart concurrently",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "struct",
    "name": "labelAddingPostRenderer",
    "params": "",
    "doc": "// labelAddingPostRenderer is a post-renderer that adds labels to all resources",
    "source_file": "./backend/k8s/deployer.go"
  },
  {
    "type": "function",
    "name": "getGVR",
    "params": "discoveryClient discovery.DiscoveryInterface, resourceKind string",
    "doc": "// mapResourceToGVR maps resource types to their GroupVersionResource (GVR)",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "parseRequestBody",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "parseYAMLFile",
    "params": "file io.Reader",
    "doc": "",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "EnsureNamespaceExistsAndAddLabel",
    "params": "dynamicClient dynamic.Interface, namespace string",
    "doc": "",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "autoLabelling",
    "params": "obj *unstructured.Unstructured, labelName string",
    "doc": "",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "CreateResource",
    "params": "c *gin.Context",
    "doc": "// CreateResource creates a Kubernetes resource",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "GetResource",
    "params": "c *gin.Context",
    "doc": "// GetResource retrieves a resource",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "ListResources",
    "params": "c *gin.Context",
    "doc": "// ListResources lists all resources of a given type in a namespace",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "UpdateResource",
    "params": "c *gin.Context",
    "doc": "// UpdateResource updates an existing Kubernetes resource with retry logic",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "DeleteResource",
    "params": "c *gin.Context",
    "doc": "// DeleteResource deletes a resource",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "UploadYAMLFile",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "LogWorkloads",
    "params": "c *gin.Context",
    "doc": "",
    "source_file": "./backend/k8s/resources.go"
  },
  {
    "type": "function",
    "name": "LogInfo",
    "params": "msg string, fields ...zap.Field",
    "doc": "",
    "source_file": "./backend/log/log.go"
  },
  {
    "type": "function",
    "name": "LogError",
    "params": "msg string, fields ...zap.Field",
    "doc": "",
    "source_file": "./backend/log/log.go"
  },
  {
    "type": "function",
    "name": "LogWarn",
    "params": "msg string, fields ...zap.Field",
    "doc": "",
    "source_file": "./backend/log/log.go"
  },
  {
    "type": "function",
    "name": "LogFatal",
    "params": "msg string, fields ...zap.Field",
    "doc": "",
    "source_file": "./backend/log/log.go"
  },
  {
    "type": "function",
    "name": "LogDebug",
    "params": "msg string, fields ...zap.Field",
    "doc": "",
    "source_file": "./backend/log/log.go"
  },
  {
    "type": "function",
    "name": "init",
    "params": "",
    "doc": "",
    "source_file": "./backend/log/log.go"
  },
  {
    "type": "function",
    "name": "SetNamespaceCache",
    "params": "key string, value string, expiration time.Duration",
    "doc": "// SetNamespaceCache sets a namespace data cache in Redis",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetNamespaceCache",
    "params": "key string",
    "doc": "// GetNamespaceCache retrieves cached namespace data from Redis",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetFilePath",
    "params": "filepath string",
    "doc": "// SetFilePath sets the file path in Redis",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetFilePath",
    "params": "",
    "doc": "// GetFilePath retrieves the file path from Redis",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetRepoURL",
    "params": "repoURL string",
    "doc": "",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetRepoURL",
    "params": "",
    "doc": "",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetBranch",
    "params": "branch string",
    "doc": "",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetBranch",
    "params": "",
    "doc": "",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetGitToken",
    "params": "token string",
    "doc": "",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetGitToken",
    "params": "",
    "doc": "",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetBpCmd",
    "params": "name string, bpJson string",
    "doc": "// stores binding policy",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "DeleteBpcmd",
    "params": "name string",
    "doc": "// removes binding policy from the hash",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetallBpCmd",
    "params": "",
    "doc": "// returns all BPs in the hash",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "init",
    "params": "",
    "doc": "// intializes redis client",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetJSONValue",
    "params": "key string, value interface{}, expiration time.Duration",
    "doc": "// expiration: Time until the key expires (0 for no expiration)",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetJSONValue",
    "params": "key string, dest interface{}",
    "doc": "// Returns true if the key was found, false if it was a cache miss",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetJSONHash",
    "params": "hashKey string, field string, value interface{}",
    "doc": "// value: Any Go struct or map that can be marshalled to JSON",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetJSONHash",
    "params": "hashKey string, field string, dest interface{}",
    "doc": "// Returns true if the field was found, false if it was not found",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetAllJSONHash",
    "params": "hashKey string",
    "doc": "// Returns a map of field names to unmarshaled JSON values",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "SetWorkloadLabel",
    "params": "label string",
    "doc": "// SetWorkloadLabel stores the workload label in Redis",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "GetWorkloadLabel",
    "params": "",
    "doc": "// GetWorkloadLabel gets the workload label from Redis",
    "source_file": "./backend/redis/redis.go"
  },
  {
    "type": "function",
    "name": "ReadFileContent",
    "params": "file io.Reader",
    "doc": "",
    "source_file": "./backend/utils/utils.go"
  },
  {
    "type": "function",
    "name": "GetFormFileBytes",
    "params": "fileName string, ctx *gin.Context",
    "doc": "// Return the form file bytes",
    "source_file": "./backend/utils/utils.go"
  },
  {
    "type": "function",
    "name": "GenerateInstallID",
    "params": "",
    "doc": "// GenerateInstallID generates a unique installation ID",
    "source_file": "./backend/utils/installer.go"
  },
  {
    "type": "function",
    "name": "YAMLToJSON",
    "params": "yamlData []byte",
    "doc": "// YAMLToJSON converts YAML to JSON",
    "source_file": "./backend/utils/parser.go"
  },
  {
    "type": "function",
    "name": "GenerateToken",
    "params": "username string, permissions []string",
    "doc": "// GenerateToken creates a new JWT token for a user with specified permissions",
    "source_file": "./backend/utils/jwt.go"
  },
  {
    "type": "function",
    "name": "ValidateToken",
    "params": "tokenString string",
    "doc": "// ValidateToken validates a JWT token and returns the parsed claims",
    "source_file": "./backend/utils/jwt.go"
  },
  {
    "type": "struct",
    "name": "TokenClaims",
    "params": "",
    "doc": "// TokenClaims represents the JWT token claims",
    "source_file": "./backend/utils/jwt.go"
  },
  {
    "type": "function",
    "name": "InitializeLogStorage",
    "params": "installID string",
    "doc": "// InitializeLogStorage initializes log storage for a new installation",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "AppendLog",
    "params": "installID, msg string",
    "doc": "// AppendLog appends a line to the installation log",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "GetLogs",
    "params": "installID string",
    "doc": "// GetLogs returns the logs for a specific installation",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "InstallationExists",
    "params": "installID string",
    "doc": "// InstallationExists checks if an installation ID exists",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "InstallKubeStellar",
    "params": "installID, platform string",
    "doc": "// InstallKubeStellar performs the KubeStellar installation",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "processOutput",
    "params": "r io.Reader, installID string, isError bool",
    "doc": "// processOutput processes the command output stream",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "extractEnvironmentVariables",
    "params": "installID string",
    "doc": "// extractEnvironmentVariables extracts environment variables from the installation logs",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "downloadFile",
    "params": "url, filepath string",
    "doc": "// downloadFile downloads a file from a URL",
    "source_file": "./backend/installer/installer.go"
  },
  {
    "type": "function",
    "name": "CheckAllPrerequisites",
    "params": "",
    "doc": "// CheckAllPrerequisites checks all required prerequisites",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "checkArchitecture",
    "params": "",
    "doc": "// checkArchitecture verifies if the current CPU architecture is supported",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "checkPrerequisite",
    "params": "name, command string, args []string, versionArgs []string, required string, installGuide string, extractor func(string",
    "doc": "// checkPrerequisite checks if a specific prerequisite is installed and valid",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "CheckCommand",
    "params": "name string, args ...string",
    "doc": "// CheckCommand checks if a command is available",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "compareVersions",
    "params": "actual string, required string",
    "doc": "// compareVersions checks if the actual version satisfies the required constraint",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "checkSysctlValues",
    "params": "",
    "doc": "// checkSysctlValues checks sysctl values important for running containers",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractDockerVersion",
    "params": "output string",
    "doc": "// Version extractors for different tools",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractKubectlVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractKflexVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractClusteradmVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractHelmVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractKindVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractK3dVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractArgoCDVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractGoVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractKoVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractMakeVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractJqVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "extractYqVersion",
    "params": "output string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "DisplayPrerequisitesStatus",
    "params": "response PrerequisitesResponse",
    "doc": "// DisplayPrerequisitesStatus formats and displays the prerequisites status",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "writePrereqStatus",
    "params": "sb *strings.Builder, response PrerequisitesResponse, name string",
    "doc": "",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "struct",
    "name": "PrerequisiteStatus",
    "params": "",
    "doc": "// PrerequisiteStatus represents the status of a prerequisite",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "struct",
    "name": "ArchitectureStatus",
    "params": "",
    "doc": "// ArchitectureStatus represents CPU architecture compatibility status",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "struct",
    "name": "PrerequisitesResponse",
    "params": "",
    "doc": "// PrerequisitesResponse represents the response for prerequisites check",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "struct",
    "name": "SysctlStatus",
    "params": "",
    "doc": "// SysctlStatus represents the status of a sysctl check",
    "source_file": "./backend/installer/Prerequisites.go"
  },
  {
    "type": "function",
    "name": "CheckKubeStellarStatus",
    "params": "",
    "doc": "// CheckKubeStellarStatus checks for contexts containing \"kubeflex\", \"kind\", or \"k3d\" and required namespaces",
    "source_file": "./backend/installer/kubestellar_status.go"
  },
  {
    "type": "struct",
    "name": "KubeStellarStatus",
    "params": "",
    "doc": "// KubeStellarStatus holds the check results",
    "source_file": "./backend/installer/kubestellar_status.go"
  }
]
