{
  "Golang errors": {},
  "Issues": [
    {
      "severity": "HIGH",
      "confidence": "LOW",
      "cwe": {
        "id": "798",
        "url": "https://cwe.mitre.org/data/definitions/798.html"
      },
      "rule_id": "G101",
      "details": "Potential hardcoded credentials",
      "file": "/home/peroxide/ui/backend/jwt/config.go",
      "code": "20: \tJWTSecretEnv         = \"JWT_SECRET\"\n21: \tTokenExpirationEnv   = \"JWT_TOKEN_EXPIRATION_HOURS\"\n22: \tRefreshExpirationEnv = \"JWT_REFRESH_EXPIRATION_HOURS\"\n",
      "line": "21",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/wds/common.go",
      "code": "247: \t// Step 3: Set the new context using kflex\n248: \tkflexCmd := exec.Command(\"kflex\", \"ctx\", \"--overwrite-existing-context\", newWdsContext)\n249: \tkflexOutput, kflexErr := kflexCmd.CombinedOutput()\n",
      "line": "248",
      "column": "14",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/wds/common.go",
      "code": "237: \t// Step 2: Delete Kubernetes context newContext\n238: \tdelCtxCmd := exec.Command(\"kubectl\", \"config\", \"delete-context\", newWdsContext)\n239: \tdelCtxOutput, delCtxErr := delCtxCmd.CombinedOutput()\n",
      "line": "238",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/wds/common.go",
      "code": "225: \t// Execute the command\n226: \tcmd := exec.Command(helmCmd, args...)\n227: \toutput, err = cmd.CombinedOutput()\n",
      "line": "226",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/k8s/deployer.go",
      "code": "693: \t\tdefer func() {\n694: \t\t\trestoreCmd := exec.CommandContext(ctx, \"kubectl\", \"config\", \"use-context\", currentContext)\n695: \t\t\tif restoreErr := restoreCmd.Run(); restoreErr != nil {\n",
      "line": "694",
      "column": "18",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/its/manual/handlers/cluster.go",
      "code": "373: \n374: \tcmd := exec.Command(\"helm\", \"upgrade\", \"--install\",\n375: \t\treleaseName, \"ocm/klusterlet\",\n376: \t\t\"--kubeconfig\", tmpPath,\n377: \t\t\"--namespace\", \"open-cluster-management\",\n378: \t\t\"--create-namespace\",\n379: \t\t\"--set\", fmt.Sprintf(\"hubKubeconfig=%s\", hubKube),\n380: \t)\n381: \n",
      "line": "374-380",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/installer/kubestellar_status.go",
      "code": "65: \t\t\t// Check its1-system namespace\n66: \t\t\tits1Cmd := exec.Command(\"kubectl\", \"get\", \"ns\", \"its1-system\", \"--context\", ctx, \"--ignore-not-found\")\n67: \t\t\tits1Output, _ := its1Cmd.CombinedOutput()\n",
      "line": "66",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/installer/kubestellar_status.go",
      "code": "58: \t\t\t// Check wds1-system namespace\n59: \t\t\twds1Cmd := exec.Command(\"kubectl\", \"get\", \"ns\", \"wds1-system\", \"--context\", ctx, \"--ignore-not-found\")\n60: \t\t\twds1Output, _ := wds1Cmd.CombinedOutput()\n",
      "line": "59",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/installer/installer.go",
      "code": "114: \tAppendLog(installID, \"Executing installation script...\")\n115: \tcmd := exec.Command(\"bash\", scriptPath, \"--platform\", platform)\n116: \n",
      "line": "115",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "436: \t// Clone the specific branch\n437: \tcmd := exec.Command(\"git\", \"clone\", \"-b\", storedBranch, cloneURL, tempDir)\n438: \tif err := cmd.Run(); err != nil {\n",
      "line": "437",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with variable",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "241: \t// Clone the repository\n242: \tcmd := exec.Command(\"git\", \"clone\", \"-b\", branch, cloneURL, tempDir)\n243: \tif err := cmd.Run(); err != nil {\n",
      "line": "242",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with a potential tainted input or cmd arguments",
      "file": "/home/peroxide/ui/backend/k8s/deployer.go",
      "code": "814: \tif !repoExists {\n815: \t\taddRepoCmd := exec.CommandContext(ctx, \"helm\", \"repo\", \"add\", req.RepoName, req.RepoURL, \"--force-update\")\n816: \t\tif out, err := addRepoCmd.CombinedOutput(); err != nil {\n",
      "line": "815",
      "column": "17",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with a potential tainted input or cmd arguments",
      "file": "/home/peroxide/ui/backend/installer/Prerequisites.go",
      "code": "324: \tfor _, sysctl := range sysctls {\n325: \t\tcmd := exec.Command(\"docker\", \"run\", \"--rm\", \"busybox\", \"sysctl\", sysctl.name)\n326: \t\toutput, err := cmd.CombinedOutput()\n",
      "line": "325",
      "column": "10",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with a potential tainted input or cmd arguments",
      "file": "/home/peroxide/ui/backend/api/handlers.go",
      "code": "870: \t// Create the command\n871: \tcmd := exec.Command(cmdParts[0], cmdParts[1:]...)\n872: \tcmd.Env = append(os.Environ(), fmt.Sprintf(\"KUBECONFIG=%s\", kubeconfigPath))\n",
      "line": "871",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "78",
        "url": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "rule_id": "G204",
      "details": "Subprocess launched with a potential tainted input or cmd arguments",
      "file": "/home/peroxide/ui/backend/api/handlers.go",
      "code": "272: \t\t// Method 1: Use kubectl directly (more reliable based on your experience)\n273: \t\tapproveCmd := exec.Command(\"kubectl\", append([]string{\"--context\", \"its1\", \"certificate\", \"approve\"}, pendingCSRs...)...)\n274: \t\toutput, err := approveCmd.CombinedOutput()\n",
      "line": "273",
      "column": "17",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "22",
        "url": "https://cwe.mitre.org/data/definitions/22.html"
      },
      "rule_id": "G304",
      "details": "Potential file inclusion via variable",
      "file": "/home/peroxide/ui/backend/plugins/registry.go",
      "code": "59: func (r *Registry) Load(path string) (Plugin, error) {\n60: \tdata, err := ioutil.ReadFile(path)\n61: \tif err != nil {\n",
      "line": "60",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "22",
        "url": "https://cwe.mitre.org/data/definitions/22.html"
      },
      "rule_id": "G304",
      "details": "Potential file inclusion via variable",
      "file": "/home/peroxide/ui/backend/k8s/deployer.go",
      "code": "798: \tif _, err := os.Stat(repoFile); err == nil {\n799: \t\tb, err := os.ReadFile(repoFile)\n800: \t\tif err == nil {\n",
      "line": "799",
      "column": "13",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "22",
        "url": "https://cwe.mitre.org/data/definitions/22.html"
      },
      "rule_id": "G304",
      "details": "Potential file inclusion via variable",
      "file": "/home/peroxide/ui/backend/k8s/deployer.go",
      "code": "132: \t\tfilePath := filepath.Join(deployPath, file.Name())\n133: \t\tdata, err := os.ReadFile(filePath)\n134: \t\tif err != nil {\n",
      "line": "133",
      "column": "16",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "22",
        "url": "https://cwe.mitre.org/data/definitions/22.html"
      },
      "rule_id": "G304",
      "details": "Potential file inclusion via variable",
      "file": "/home/peroxide/ui/backend/installer/installer.go",
      "code": "212: \t// Create the file\n213: \tout, err := os.Create(filepath)\n214: \tif err != nil {\n",
      "line": "213",
      "column": "14",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "785: \n786: \tresp, err := http.Get(apiURL)\n787: \tif err != nil {\n",
      "line": "786",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "724: \n725: \tresp, err := http.Get(apiURL)\n726: \tif err != nil {\n",
      "line": "725",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "697: \n698: \tresp, err := http.Get(apiURL)\n699: \tif err != nil {\n",
      "line": "698",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "673: \t// Make request to Artifact Hub API\n674: \tresp, err := http.Get(apiURL)\n675: \tif err != nil {\n",
      "line": "674",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "557: \n558: \tresp, err := http.Get(apiURL)\n559: \tif err != nil {\n",
      "line": "558",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "384: \t// Make request to Artifact Hub API\n385: \tresp, err := http.Get(apiURL)\n386: \tif err != nil {\n",
      "line": "385",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "MEDIUM",
      "cwe": {
        "id": "88",
        "url": "https://cwe.mitre.org/data/definitions/88.html"
      },
      "rule_id": "G107",
      "details": "Potential HTTP request made with variable url",
      "file": "/home/peroxide/ui/backend/api/artifact.go",
      "code": "280: \n281: \tresp, err := http.Get(apiURL)\n282: \tif err != nil {\n",
      "line": "281",
      "column": "15",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "276",
        "url": "https://cwe.mitre.org/data/definitions/276.html"
      },
      "rule_id": "G302",
      "details": "Expect file permissions to be 0600 or less",
      "file": "/home/peroxide/ui/backend/installer/installer.go",
      "code": "107: \t// Make script executable\n108: \tif err := os.Chmod(scriptPath, 0755); err != nil {\n109: \t\tAppendLog(installID, fmt.Sprintf(\"Failed to make script executable: %v\", err))\n",
      "line": "108",
      "column": "12",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "cwe": {
        "id": "276",
        "url": "https://cwe.mitre.org/data/definitions/276.html"
      },
      "rule_id": "G306",
      "details": "Expect WriteFile permissions to be 0600 or less",
      "file": "/home/peroxide/ui/backend/plugins/registry.go",
      "code": "54: \t}\n55: \treturn ioutil.WriteFile(r.Path, data, 0644)\n56: }\n",
      "line": "55",
      "column": "9",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "1151: \t\t\t\t\tlog.Print(errMsg)\n1152: \t\t\t\t\tconn.WriteMessage(websocket.TextMessage, []byte(errMsg))\n1153: \t\t\t\t\ttime.Sleep(5 * time.Second) // Wait longer before retrying on error\n",
      "line": "1152",
      "column": "6",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "1147: \t\t\t\tlogsBytes, err := io.ReadAll(podLogsStream)\n1148: \t\t\t\tpodLogsStream.Close()\n1149: \t\t\t\tif err != nil {\n",
      "line": "1148",
      "column": "5",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "1140: \t\t\t\t\tlog.Print(errMsg)\n1141: \t\t\t\t\tconn.WriteMessage(websocket.TextMessage, []byte(errMsg))\n1142: \t\t\t\t\ttime.Sleep(5 * time.Second) // Wait longer before retrying on error\n",
      "line": "1141",
      "column": "6",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "1103: \t\tlog.Printf(\"Error getting clientset for cluster/context %s: %v\", cluster, err)\n1104: \t\tconn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(\"error: %v\", err)))\n1105: \t\treturn\n",
      "line": "1104",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "917: \t\t\t// Cache all clusters data\n918: \t\t\tredis.SetJSONValue(allClustersCacheKey, allClusters, ClusterDataCacheDuration)\n919: \t\t}\n",
      "line": "918",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "903: \t\t\t\t\t\t// Cache the cluster data\n904: \t\t\t\t\t\tredis.SetJSONValue(clusterCacheKey, clusterData, ClusterDataCacheDuration)\n905: \t\t\t\t\t}\n",
      "line": "904",
      "column": "7",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/wecs.go",
      "code": "885: \t\t\t\t\t\t\t\t\t// Cache namespace data\n886: \t\t\t\t\t\t\t\t\tredis.SetJSONValue(nsCacheKey, nsData, NamespaceCacheDuration)\n887: \t\t\t\t\t\t\t\t}\n",
      "line": "886",
      "column": "10",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/exec.go",
      "code": "252: \t} else {\n253: \t\tconn.WriteMessage(websocket.TextMessage, []byte(\"Terminal session ended.\"))\n254: \t}\n",
      "line": "253",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/exec.go",
      "code": "249: \tif err != nil {\n250: \t\tconn.WriteMessage(websocket.TextMessage, []byte(\"Error: \"+err.Error()))\n251: \t\tklog.Errorf(\"Terminal session error: %v\", err)\n",
      "line": "250",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/exec.go",
      "code": "236: \t\tconn.WriteMessage(websocket.TextMessage, []byte(\"Error: You do not have permission to execute into this pod. Please check your access rights.\"))\n237: \t\tconn.Close()\n238: \t\treturn\n",
      "line": "237",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/exec.go",
      "code": "235: \tif !CanI(clientset, ssar) {\n236: \t\tconn.WriteMessage(websocket.TextMessage, []byte(\"Error: You do not have permission to execute into this pod. Please check your access rights.\"))\n237: \t\tconn.Close()\n",
      "line": "236",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/exec.go",
      "code": "176: \t\t\tif err := json.Unmarshal(message, \u0026msg); err == nil \u0026\u0026 msg.Op == \"stdin\" {\n177: \t\t\t\twriter.Write([]byte(msg.Data))\n178: \t\t\t}\n",
      "line": "177",
      "column": "5",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wecs/exec.go",
      "code": "68: \tif session, ok := sm.Sessions[sessionId]; ok {\n69: \t\tsession.socket.Close()\n70: \t\tdelete(sm.Sessions, sessionId)\n",
      "line": "69",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wds/deployment/logs.go",
      "code": "93: \n94: \tinformer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n95: \t\tUpdateFunc: func(oldObj, newObj interface{}) {\n96: \t\t\toldDeployment, ok1 := oldObj.(*v1.Deployment)\n97: \t\t\tnewDeployment, ok2 := newObj.(*v1.Deployment)\n98: \t\t\tif !ok1 || !ok2 || newDeployment.Name != deploymentName {\n99: \t\t\t\treturn\n100: \t\t\t}\n101: \t\t\tupdateHandler(conn, oldDeployment, newDeployment)\n102: \t\t},\n103: \t})\n104: \tstopCh := make(chan struct{})\n",
      "line": "94-103",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wds/controller.go",
      "code": "137: \tlog.Println(message)\n138: \tc.conn.WriteMessage(websocket.TextMessage, []byte(message))\n139: \tc.workqueue.Add(obj)\n",
      "line": "138",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wds/controller.go",
      "code": "105: \tlog.Printf(\"Successfully processed deployment: %s\", deployment.Name)\n106: \tc.conn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(\"Successfully processed deployment: %s\", deployment.Name)))\n107: \treturn true\n",
      "line": "106",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wds/controller.go",
      "code": "100: \t\tklog.Errorf(\"Error syncing deployment %s: %v\", key, err)\n101: \t\tc.conn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(\"Error: syncing deployment %s: %v \", key, err)))\n102: \t\tc.workqueue.AddRateLimited(objRef)\n",
      "line": "101",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wds/controller.go",
      "code": "96: \t\t\tklog.V(4).Infof(\"Deployment %s has been deleted\", key)\n97: \t\t\tc.conn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(\"Deployment %s has been deleted\", key)))\n98: \t\t\treturn true\n",
      "line": "97",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/wds/controller.go",
      "code": "68: \t\u003c-ch\n69: \tc.conn.Close()\n70: }\n",
      "line": "69",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/utils/parser.go",
      "code": "17: \tjsonStr, _ := json.Marshal(jsonData)\n18: \tjson.Unmarshal(jsonStr, \u0026jsonData)\n19: \treturn jsonData, nil\n",
      "line": "18",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/routes/deployment.go",
      "code": "42: \t\t\tlog.Println(\"Failed to get Kubernetes client:\", err)\n43: \t\t\tconn.WriteMessage(websocket.TextMessage, []byte(\"Error getting Kubernetes client\"))\n44: \t\t\treturn\n",
      "line": "43",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1785: \tw.Header().Set(\"Content-Type\", \"application/json\")\n1786: \tjson.NewEncoder(w).Encode(map[string]interface{}{\n1787: \t\t\"namespace\": namespaceName,\n1788: \t\t\"source\":    options.SourceContext,\n1789: \t\t\"results\":   results,\n1790: \t})\n1791: }\n",
      "line": "1786-1790",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1687: \tw.Header().Set(\"Content-Type\", \"application/json\")\n1688: \tjson.NewEncoder(w).Encode(response)\n1689: }\n",
      "line": "1688",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1670: \t\tw.WriteHeader(http.StatusInternalServerError)\n1671: \t\tjson.NewEncoder(w).Encode(errorResponse)\n1672: \t\treturn\n",
      "line": "1671",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1590: \tw.Header().Set(\"Content-Type\", \"application/json\")\n1591: \tjson.NewEncoder(w).Encode(details)\n1592: }\n",
      "line": "1591",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1559: \tw.Header().Set(\"Content-Type\", \"application/json\")\n1560: \tjson.NewEncoder(w).Encode(response)\n1561: }\n",
      "line": "1560",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1550: \t\tw.WriteHeader(http.StatusInternalServerError)\n1551: \t\tjson.NewEncoder(w).Encode(map[string]interface{}{\n1552: \t\t\t\"error\":   \"Failed to retrieve namespaces from any context\",\n1553: \t\t\t\"details\": errors,\n1554: \t\t})\n1555: \t\treturn\n",
      "line": "1551-1554",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1167: \n1168: \t\t\tredis.SetNamespaceCache(\"all_contexts_data\", string(jsonData), 30*time.Second)\n1169: \t\t\tif err := safeWrite(websocket.TextMessage, jsonData); err != nil {\n",
      "line": "1168",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "1106: \t\t\t\tjsonData, _ := json.Marshal(message)\n1107: \t\t\t\tsafeWrite(websocket.TextMessage, jsonData)\n1108: \t\t\t}(ctx, contextName)\n",
      "line": "1107",
      "column": "5",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "672: \tif jsonData, err := json.Marshal(result); err == nil {\n673: \t\tredis.SetNamespaceCache(cacheKey, string(jsonData), 5*time.Second)\n674: \t}\n",
      "line": "673",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "663: \t\t\tif jsonData, err := json.Marshal(details); err == nil {\n664: \t\t\t\tredis.SetNamespaceCache(nsKey, string(jsonData), 5*time.Second)\n665: \t\t\t}\n",
      "line": "664",
      "column": "5",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "536: \t\tif jsonData, err := json.Marshal(result); err == nil {\n537: \t\t\tredis.SetNamespaceCache(cacheKey, string(jsonData), cacheTTL)\n538: \t\t}\n",
      "line": "537",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "516: \t\t\t\t\tif jsonData, err := json.Marshal(details); err == nil {\n517: \t\t\t\t\t\tredis.SetNamespaceCache(nsKey, string(jsonData), cacheTTL*2)\n518: \t\t\t\t\t}\n",
      "line": "517",
      "column": "7",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "380: \t\tif jsonData, err := json.Marshal(list.Items); err == nil {\n381: \t\t\tredis.SetNamespaceCache(cacheKey, string(jsonData), cacheDuration)\n382: \t\t}\n",
      "line": "381",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "265: \t\t\t\t\tif jsonData, err := json.Marshal(list.Items); err == nil {\n266: \t\t\t\t\t\tredis.SetNamespaceCache(cacheKey, string(jsonData), cacheDuration)\n267: \t\t\t\t\t}\n",
      "line": "266",
      "column": "7",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "194: \t\tif jsonData, err := json.Marshal(resources); err == nil {\n195: \t\t\tredis.SetNamespaceCache(cacheKey, string(jsonData), 60*time.Minute)\n196: \t\t}\n",
      "line": "195",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/namespace/namespace.go",
      "code": "185: \t\t\tif jsonData, err := json.Marshal(resources); err == nil {\n186: \t\t\t\tredis.SetNamespaceCache(cacheKey, string(jsonData), 60*time.Minute)\n187: \t\t\t}\n",
      "line": "186",
      "column": "5",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/k8s/resources.go",
      "code": "557: \n558: \tinformer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n559: \t\tAddFunc: func(obj interface{}) {\n560: \t\t\tmux.RLock()\n561: \t\t\tdefer mux.RUnlock()\n562: \t\t\tif !synced {\n563: \t\t\t\treturn\n564: \t\t\t}\n565: \n566: \t\t\titem, ok := obj.(*unstructured.Unstructured)\n567: \t\t\tif !ok {\n568: \t\t\t\tlog.Printf(\"item is not *unstructured.Unstructured\")\n569: \t\t\t\treturn\n570: \t\t\t}\n571: \n572: \t\t\tgvk := item.GroupVersionKind()\n573: \t\t\tobjectName := item.GetName()\n574: \t\t\tobjectNamespace := item.GetNamespace()\n575: \t\t\tuid := string(item.GetUID())\n576: \n577: \t\t\tsendMessage(\"ADDED\", \"Kind=%s, Name=%s, Namespace=%s, UID=%s\",\n578: \t\t\t\tgvk.Kind, objectName, objectNamespace, uid)\n579: \n580: \t\t\t// Resource-specific additional information on creation\n581: \t\t\tswitch {\n582: \t\t\tcase strings.EqualFold(gvk.Kind, \"Deployment\"):\n583: \t\t\t\tif replicas, exists, _ := unstructured.NestedInt64(item.Object, \"spec\", \"replicas\"); exists {\n584: \t\t\t\t\tsendMessage(\"INFO\", \"Deployment %s created with %d replicas\", objectName, replicas)\n585: \t\t\t\t}\n586: \n587: \t\t\t\t// Log container images on creation\n588: \t\t\t\tif containers, ok := getNestedValue(item.Object, \"slice\", \"spec\", \"template\", \"spec\", \"containers\"); ok \u0026\u0026 containers != nil {\n589: \t\t\t\t\tfor i, c := range containers.([]interface{}) {\n590: \t\t\t\t\t\tcontainer := c.(map[string]interface{})\n591: \t\t\t\t\t\tcontainerName := container[\"name\"].(string)\n592: \t\t\t\t\t\timage := container[\"image\"].(string)\n593: \t\t\t\t\t\tsendMessage(\"INFO\", \"Container #%d: %s using image %s\", i+1, containerName, image)\n594: \t\t\t\t\t}\n595: \t\t\t\t}\n596: \n597: \t\t\tcase strings.EqualFold(gvk.Kind, \"Service\"):\n598: \t\t\t\tif serviceType, exists, _ := unstructured.NestedString(item.Object, \"spec\", \"type\"); exists {\n599: \t\t\t\t\tsendMessage(\"INFO\", \"Service %s created with type %s\", objectName, serviceType)\n600: \t\t\t\t}\n601: \n602: \t\t\t\t// Log service ports\n603: \t\t\t\tif ports, ok := getNestedValue(item.Object, \"slice\", \"spec\", \"ports\"); ok \u0026\u0026 ports != nil {\n604: \t\t\t\t\tfor _, p := range ports.([]interface{}) {\n605: \t\t\t\t\t\tport := p.(map[string]interface{})\n606: \t\t\t\t\t\tportStr := fmt.Sprintf(\"%v\", port[\"port\"])\n607: \t\t\t\t\t\tprotocol := \"TCP\"\n608: \t\t\t\t\t\tif proto, exists := port[\"protocol\"]; exists {\n609: \t\t\t\t\t\t\tprotocol = proto.(string)\n610: \t\t\t\t\t\t}\n611: \t\t\t\t\t\tsendMessage(\"INFO\", \"Service port: %s/%s\", portStr, protocol)\n612: \t\t\t\t\t}\n613: \t\t\t\t}\n614: \n615: \t\t\tcase strings.EqualFold(gvk.Kind, \"ConfigMap\"):\n616: \t\t\t\tif data, ok := getNestedValue(item.Object, \"map\", \"data\"); ok \u0026\u0026 data != nil {\n617: \t\t\t\t\tkeys := make([]string, 0, len(data.(map[string]interface{})))\n618: \t\t\t\t\tfor k := range data.(map[string]interface{}) {\n619: \t\t\t\t\t\tkeys = append(keys, k)\n620: \t\t\t\t\t}\n621: \t\t\t\t\tsendMessage(\"INFO\", \"ConfigMap %s created with keys: %s\", objectName, strings.Join(keys, \", \"))\n622: \t\t\t\t}\n623: \n624: \t\t\tcase strings.EqualFold(gvk.Kind, \"Secret\"):\n625: \t\t\t\tif data, ok := getNestedValue(item.Object, \"map\", \"data\"); ok \u0026\u0026 data != nil {\n626: \t\t\t\t\tkeys := make([]string, 0, len(data.(map[string]interface{})))\n627: \t\t\t\t\tfor k := range data.(map[string]interface{}) {\n628: \t\t\t\t\t\tkeys = append(keys, k)\n629: \t\t\t\t\t}\n630: \t\t\t\t\tsendMessage(\"INFO\", \"Secret %s created with keys: %s\", objectName, strings.Join(keys, \", \"))\n631: \t\t\t\t}\n632: \t\t\t}\n633: \t\t},\n634: \t\tUpdateFunc: func(oldObj, newObj interface{}) {\n635: \t\t\tmux.RLock()\n636: \t\t\tdefer mux.RUnlock()\n637: \t\t\tif !synced {\n638: \t\t\t\treturn\n639: \t\t\t}\n640: \n641: \t\t\told, ok := oldObj.(*unstructured.Unstructured)\n642: \t\t\tif !ok {\n643: \t\t\t\tlog.Printf(\"item is not *unstructured.Unstructured\")\n644: \t\t\t\treturn\n645: \t\t\t}\n646: \t\t\tnew, ok := newObj.(*unstructured.Unstructured)\n647: \t\t\tif !ok {\n648: \t\t\t\tlog.Printf(\"item is not *unstructured.Unstructured\")\n649: \t\t\t\treturn\n650: \t\t\t}\n651: \n652: \t\t\t// Skip if resource version hasn't changed\n653: \t\t\tif old.GetResourceVersion() == new.GetResourceVersion() {\n654: \t\t\t\treturn\n655: \t\t\t}\n656: \n657: \t\t\tuid := string(old.GetUID())\n658: \t\t\tgvk := old.GroupVersionKind()\n659: \t\t\tobjectName := old.GetName()\n660: \t\t\tobjectNamespace := old.GetNamespace()\n661: \n662: \t\t\tsendMessage(\"UPDATED\", \"Kind=%s, Name=%s, Namespace=%s, UID=%s\",\n663: \t\t\t\tgvk.Kind, objectName, objectNamespace, uid)\n664: \n665: \t\t\t// Check for label changes\n666: \t\t\tlabelsOld := old.GetLabels()\n667: \t\t\tlabelsNew := new.GetLabels()\n668: \t\t\tif !reflect.DeepEqual(labelsOld, labelsNew) {\n669: \t\t\t\t// Find added, removed, and changed labels\n670: \t\t\t\tadded := []string{}\n671: \t\t\t\tchanged := []string{}\n672: \t\t\t\tremoved := []string{}\n673: \n674: \t\t\t\tfor k, v := range labelsNew {\n675: \t\t\t\t\toldVal, exists := labelsOld[k]\n676: \t\t\t\t\tif !exists {\n677: \t\t\t\t\t\tadded = append(added, fmt.Sprintf(\"%s=%s\", k, v))\n678: \t\t\t\t\t} else if oldVal != v {\n679: \t\t\t\t\t\tchanged = append(changed, fmt.Sprintf(\"%s: %s → %s\", k, oldVal, v))\n680: \t\t\t\t\t}\n681: \t\t\t\t}\n682: \n683: \t\t\t\tfor k := range labelsOld {\n684: \t\t\t\t\tif _, exists := labelsNew[k]; !exists {\n685: \t\t\t\t\t\tremoved = append(removed, k)\n686: \t\t\t\t\t}\n687: \t\t\t\t}\n688: \n689: \t\t\t\tif len(added) \u003e 0 {\n690: \t\t\t\t\tsendMessage(\"LABELS ADDED\", \"%s\", strings.Join(added, \", \"))\n691: \t\t\t\t}\n692: \t\t\t\tif len(changed) \u003e 0 {\n693: \t\t\t\t\tsendMessage(\"LABELS CHANGED\", \"%s\", strings.Join(changed, \", \"))\n694: \t\t\t\t}\n695: \t\t\t\tif len(removed) \u003e 0 {\n696: \t\t\t\t\tsendMessage(\"LABELS REMOVED\", \"%s\", strings.Join(removed, \", \"))\n697: \t\t\t\t}\n698: \t\t\t}\n699: \n700: \t\t\t// Resource-specific update checks\n701: \t\t\tswitch {\n702: \t\t\tcase strings.EqualFold(gvk.Kind, \"Deployment\"):\n703: \t\t\t\t// Check for replicas changes\n704: \t\t\t\toldReplicas, oldExists, _ := unstructured.NestedInt64(old.Object, \"spec\", \"replicas\")\n705: \t\t\t\tnewReplicas, newExists, _ := unstructured.NestedInt64(new.Object, \"spec\", \"replicas\")\n706: \n707: \t\t\t\tif oldExists \u0026\u0026 newExists \u0026\u0026 oldReplicas != newReplicas {\n708: \t\t\t\t\tsendMessage(\"REPLICAS CHANGED\", \"%s: %d → %d\", objectName, oldReplicas, newReplicas)\n709: \t\t\t\t}\n710: \n711: \t\t\t\t// Check for container image changes\n712: \t\t\t\toldSpec, oldSpecExists, _ := unstructured.NestedMap(old.Object, \"spec\", \"template\", \"spec\")\n713: \t\t\t\tnewSpec, newSpecExists, _ := unstructured.NestedMap(new.Object, \"spec\", \"template\", \"spec\")\n714: \n715: \t\t\t\tif oldSpecExists \u0026\u0026 newSpecExists {\n716: \t\t\t\t\toldContainers, oldContExists, _ := unstructured.NestedSlice(oldSpec, \"containers\")\n717: \t\t\t\t\tnewContainers, newContExists, _ := unstructured.NestedSlice(newSpec, \"containers\")\n718: \n719: \t\t\t\t\tif oldContExists \u0026\u0026 newContExists {\n720: \t\t\t\t\t\t// Build a map for old containers by name for easy lookup\n721: \t\t\t\t\t\toldContainerMap := make(map[string]map[string]interface{})\n722: \t\t\t\t\t\tfor _, c := range oldContainers {\n723: \t\t\t\t\t\t\tcontainer := c.(map[string]interface{})\n724: \t\t\t\t\t\t\tname := container[\"name\"].(string)\n725: \t\t\t\t\t\t\toldContainerMap[name] = container\n726: \t\t\t\t\t\t}\n727: \n728: \t\t\t\t\t\t// Check each new container against old ones\n729: \t\t\t\t\t\tfor _, c := range newContainers {\n730: \t\t\t\t\t\t\tcontainer := c.(map[string]interface{})\n731: \t\t\t\t\t\t\tname := container[\"name\"].(string)\n732: \t\t\t\t\t\t\tnewImage := container[\"image\"].(string)\n733: \n734: \t\t\t\t\t\t\tif oldContainer, exists := oldContainerMap[name]; exists {\n735: \t\t\t\t\t\t\t\toldImage := oldContainer[\"image\"].(string)\n736: \t\t\t\t\t\t\t\tif oldImage != newImage {\n737: \t\t\t\t\t\t\t\t\tsendMessage(\"CONTAINER IMAGE\", \"%s: %s → %s\", name, oldImage, newImage)\n738: \t\t\t\t\t\t\t\t}\n739: \n740: \t\t\t\t\t\t\t\t// Check resource requests/limits\n741: \t\t\t\t\t\t\t\toldResources, oldResExists := oldContainer[\"resources\"]\n742: \t\t\t\t\t\t\t\tnewResources, newResExists := container[\"resources\"]\n743: \n744: \t\t\t\t\t\t\t\tif oldResExists \u0026\u0026 newResExists \u0026\u0026 !reflect.DeepEqual(oldResources, newResources) {\n745: \t\t\t\t\t\t\t\t\toldResMap := oldResources.(map[string]interface{})\n746: \t\t\t\t\t\t\t\t\tnewResMap := newResources.(map[string]interface{})\n747: \n748: \t\t\t\t\t\t\t\t\t// Check requests\n749: \t\t\t\t\t\t\t\t\tif oldReq, oldExists := oldResMap[\"requests\"]; oldExists {\n750: \t\t\t\t\t\t\t\t\t\tif newReq, newExists := newResMap[\"requests\"]; newExists {\n751: \t\t\t\t\t\t\t\t\t\t\tif !reflect.DeepEqual(oldReq, newReq) {\n752: \t\t\t\t\t\t\t\t\t\t\t\tsendMessage(\"RESOURCE REQUESTS\", \"%s resources updated\", name)\n753: \n754: \t\t\t\t\t\t\t\t\t\t\t\t// Detailed CPU/memory changes\n755: \t\t\t\t\t\t\t\t\t\t\t\toldReqMap := oldReq.(map[string]interface{})\n756: \t\t\t\t\t\t\t\t\t\t\t\tnewReqMap := newReq.(map[string]interface{})\n757: \n758: \t\t\t\t\t\t\t\t\t\t\t\tif oldCPU, exists := oldReqMap[\"cpu\"]; exists {\n759: \t\t\t\t\t\t\t\t\t\t\t\t\tif newCPU, exists := newReqMap[\"cpu\"]; exists \u0026\u0026 oldCPU != newCPU {\n760: \t\t\t\t\t\t\t\t\t\t\t\t\t\tsendMessage(\"CPU REQUEST\", \"%s: %v → %v\", name, oldCPU, newCPU)\n761: \t\t\t\t\t\t\t\t\t\t\t\t\t}\n762: \t\t\t\t\t\t\t\t\t\t\t\t}\n763: \n764: \t\t\t\t\t\t\t\t\t\t\t\tif oldMem, exists := oldReqMap[\"memory\"]; exists {\n765: \t\t\t\t\t\t\t\t\t\t\t\t\tif newMem, exists := newReqMap[\"memory\"]; exists \u0026\u0026 oldMem != newMem {\n766: \t\t\t\t\t\t\t\t\t\t\t\t\t\tsendMessage(\"MEMORY REQUEST\", \"%s: %v → %v\", name, oldMem, newMem)\n767: \t\t\t\t\t\t\t\t\t\t\t\t\t}\n768: \t\t\t\t\t\t\t\t\t\t\t\t}\n769: \t\t\t\t\t\t\t\t\t\t\t}\n770: \t\t\t\t\t\t\t\t\t\t}\n771: \t\t\t\t\t\t\t\t\t}\n772: \n773: \t\t\t\t\t\t\t\t\t// Check limits\n774: \t\t\t\t\t\t\t\t\tif oldLim, oldExists := oldResMap[\"limits\"]; oldExists {\n775: \t\t\t\t\t\t\t\t\t\tif newLim, newExists := newResMap[\"limits\"]; newExists {\n776: \t\t\t\t\t\t\t\t\t\t\tif !reflect.DeepEqual(oldLim, newLim) {\n777: \t\t\t\t\t\t\t\t\t\t\t\tsendMessage(\"RESOURCE LIMITS\", \"%s limits updated\", name)\n778: \n779: \t\t\t\t\t\t\t\t\t\t\t\t// Detailed CPU/memory changes\n780: \t\t\t\t\t\t\t\t\t\t\t\toldLimMap := oldLim.(map[string]interface{})\n781: \t\t\t\t\t\t\t\t\t\t\t\tnewLimMap := newLim.(map[string]interface{})\n782: \n783: \t\t\t\t\t\t\t\t\t\t\t\tif oldCPU, exists := oldLimMap[\"cpu\"]; exists {\n784: \t\t\t\t\t\t\t\t\t\t\t\t\tif newCPU, exists := newLimMap[\"cpu\"]; exists \u0026\u0026 oldCPU != newCPU {\n785: \t\t\t\t\t\t\t\t\t\t\t\t\t\tsendMessage(\"CPU LIMIT\", \"%s: %v → %v\", name, oldCPU, newCPU)\n786: \t\t\t\t\t\t\t\t\t\t\t\t\t}\n787: \t\t\t\t\t\t\t\t\t\t\t\t}\n788: \n789: \t\t\t\t\t\t\t\t\t\t\t\tif oldMem, exists := oldLimMap[\"memory\"]; exists {\n790: \t\t\t\t\t\t\t\t\t\t\t\t\tif newMem, exists := newLimMap[\"memory\"]; exists \u0026\u0026 oldMem != newMem {\n791: \t\t\t\t\t\t\t\t\t\t\t\t\t\tsendMessage(\"MEMORY LIMIT\", \"%s: %v → %v\", name, oldMem, newMem)\n792: \t\t\t\t\t\t\t\t\t\t\t\t\t}\n793: \t\t\t\t\t\t\t\t\t\t\t\t}\n794: \t\t\t\t\t\t\t\t\t\t\t}\n795: \t\t\t\t\t\t\t\t\t\t}\n796: \t\t\t\t\t\t\t\t\t}\n797: \t\t\t\t\t\t\t\t}\n798: \t\t\t\t\t\t\t} else {\n799: \t\t\t\t\t\t\t\t// New container added\n800: \t\t\t\t\t\t\t\tsendMessage(\"CONTAINER ADDED\", \"%s with image %s\", name, newImage)\n801: \t\t\t\t\t\t\t}\n802: \t\t\t\t\t\t}\n803: \n804: \t\t\t\t\t\t// Check for removed containers\n805: \t\t\t\t\t\tfor _, c := range oldContainers {\n806: \t\t\t\t\t\t\tcontainer := c.(map[string]interface{})\n807: \t\t\t\t\t\t\tname := container[\"name\"].(string)\n808: \n809: \t\t\t\t\t\t\tfound := false\n810: \t\t\t\t\t\t\tfor _, nc := range newContainers {\n811: \t\t\t\t\t\t\t\tnewContainer := nc.(map[string]interface{})\n812: \t\t\t\t\t\t\t\tif newContainer[\"name\"] == name {\n813: \t\t\t\t\t\t\t\t\tfound = true\n814: \t\t\t\t\t\t\t\t\tbreak\n815: \t\t\t\t\t\t\t\t}\n816: \t\t\t\t\t\t\t}\n817: \n818: \t\t\t\t\t\t\tif !found {\n819: \t\t\t\t\t\t\t\tsendMessage(\"CONTAINER REMOVED\", \"%s\", name)\n820: \t\t\t\t\t\t\t}\n821: \t\t\t\t\t\t}\n822: \t\t\t\t\t}\n823: \t\t\t\t}\n824: \n825: \t\t\t\t// Check for status changes\n826: \t\t\t\toldStatus, oldStatusExists, _ := unstructured.NestedMap(old.Object, \"status\")\n827: \t\t\t\tnewStatus, newStatusExists, _ := unstructured.NestedMap(new.Object, \"status\")\n828: \n829: \t\t\t\tif oldStatusExists \u0026\u0026 newStatusExists {\n830: \t\t\t\t\toldAvail, oldAvailExists, _ := unstructured.NestedInt64(oldStatus, \"availableReplicas\")\n831: \t\t\t\t\tnewAvail, newAvailExists, _ := unstructured.NestedInt64(newStatus, \"availableReplicas\")\n832: \n833: \t\t\t\t\tif oldAvailExists \u0026\u0026 newAvailExists \u0026\u0026 oldAvail != newAvail {\n834: \t\t\t\t\t\tsendMessage(\"AVAILABILITY\", \"%s: Available replicas %d → %d\", objectName, oldAvail, newAvail)\n835: \t\t\t\t\t}\n836: \n837: \t\t\t\t\t// Check conditions\n838: \t\t\t\t\toldCond, oldCondExists, _ := unstructured.NestedSlice(oldStatus, \"conditions\")\n839: \t\t\t\t\tnewCond, newCondExists, _ := unstructured.NestedSlice(newStatus, \"conditions\")\n840: \n841: \t\t\t\t\tif oldCondExists \u0026\u0026 newCondExists {\n842: \t\t\t\t\t\toldCondMap := make(map[string]map[string]interface{})\n843: \t\t\t\t\t\tfor _, c := range oldCond {\n844: \t\t\t\t\t\t\tcondition := c.(map[string]interface{})\n845: \t\t\t\t\t\t\tcondType := condition[\"type\"].(string)\n846: \t\t\t\t\t\t\toldCondMap[condType] = condition\n847: \t\t\t\t\t\t}\n848: \n849: \t\t\t\t\t\tfor _, c := range newCond {\n850: \t\t\t\t\t\t\tcondition := c.(map[string]interface{})\n851: \t\t\t\t\t\t\tcondType := condition[\"type\"].(string)\n852: \t\t\t\t\t\t\tstatus := condition[\"status\"].(string)\n853: \n854: \t\t\t\t\t\t\tif oldCondition, exists := oldCondMap[condType]; exists {\n855: \t\t\t\t\t\t\t\toldStatus := oldCondition[\"status\"].(string)\n856: \t\t\t\t\t\t\t\tif oldStatus != status {\n857: \t\t\t\t\t\t\t\t\tsendMessage(\"CONDITION\", \"%s: %s changed from %s to %s\", objectName, condType, oldStatus, status)\n858: \t\t\t\t\t\t\t\t\tif reason, exists := condition[\"reason\"]; exists {\n859: \t\t\t\t\t\t\t\t\t\tsendMessage(\"REASON\", \"%s: %s\", condType, reason)\n860: \t\t\t\t\t\t\t\t\t}\n861: \t\t\t\t\t\t\t\t}\n862: \t\t\t\t\t\t\t}\n863: \t\t\t\t\t\t}\n864: \t\t\t\t\t}\n865: \t\t\t\t}\n866: \n867: \t\t\tcase strings.EqualFold(gvk.Kind, \"Service\"):\n868: \t\t\t\t// Check for service type changes\n869: \t\t\t\toldType, oldTypeExists, _ := unstructured.NestedString(old.Object, \"spec\", \"type\")\n870: \t\t\t\tnewType, newTypeExists, _ := unstructured.NestedString(new.Object, \"spec\", \"type\")\n871: \n872: \t\t\t\tif oldTypeExists \u0026\u0026 newTypeExists \u0026\u0026 oldType != newType {\n873: \t\t\t\t\tsendMessage(\"SERVICE TYPE\", \"%s: %s → %s\", objectName, oldType, newType)\n874: \t\t\t\t}\n875: \n876: \t\t\t\t// Check for port changes\n877: \t\t\t\toldPorts, oldPortsExists, _ := unstructured.NestedSlice(old.Object, \"spec\", \"ports\")\n878: \t\t\t\tnewPorts, newPortsExists, _ := unstructured.NestedSlice(new.Object, \"spec\", \"ports\")\n879: \n880: \t\t\t\tif oldPortsExists \u0026\u0026 newPortsExists \u0026\u0026 !reflect.DeepEqual(oldPorts, newPorts) {\n881: \t\t\t\t\tsendMessage(\"PORTS CHANGED\", \"%s service ports updated\", objectName)\n882: \n883: \t\t\t\t\t// Map old ports by port number for comparison\n884: \t\t\t\t\toldPortMap := make(map[int64]map[string]interface{})\n885: \t\t\t\t\tfor _, p := range oldPorts {\n886: \t\t\t\t\t\tport := p.(map[string]interface{})\n887: \t\t\t\t\t\tif portNum, ok := port[\"port\"].(int64); ok {\n888: \t\t\t\t\t\t\toldPortMap[portNum] = port\n889: \t\t\t\t\t\t}\n890: \t\t\t\t\t}\n891: \n892: \t\t\t\t\t// Check new ports\n893: \t\t\t\t\tfor _, p := range newPorts {\n894: \t\t\t\t\t\tport := p.(map[string]interface{})\n895: \t\t\t\t\t\tportNum, _ := port[\"port\"].(int64)\n896: \n897: \t\t\t\t\t\tif oldPort, exists := oldPortMap[portNum]; exists {\n898: \t\t\t\t\t\t\t// Compare existing port details\n899: \t\t\t\t\t\t\tif !reflect.DeepEqual(oldPort, port) {\n900: \t\t\t\t\t\t\t\tsendMessage(\"PORT UPDATE\", \"Port %d configuration changed\", portNum)\n901: \t\t\t\t\t\t\t}\n902: \t\t\t\t\t\t} else {\n903: \t\t\t\t\t\t\t// New port added\n904: \t\t\t\t\t\t\tprotocol := \"TCP\"\n905: \t\t\t\t\t\t\tif proto, exists := port[\"protocol\"]; exists {\n906: \t\t\t\t\t\t\t\tprotocol = proto.(string)\n907: \t\t\t\t\t\t\t}\n908: \t\t\t\t\t\t\tsendMessage(\"PORT ADDED\", \"%d/%s\", portNum, protocol)\n909: \t\t\t\t\t\t}\n910: \t\t\t\t\t}\n911: \n912: \t\t\t\t\t// Check for removed ports\n913: \t\t\t\t\tfor portNum := range oldPortMap {\n914: \t\t\t\t\t\tfound := false\n915: \t\t\t\t\t\tfor _, p := range newPorts {\n916: \t\t\t\t\t\t\tport := p.(map[string]interface{})\n917: \t\t\t\t\t\t\tif newPortNum, ok := port[\"port\"].(int64); ok \u0026\u0026 newPortNum == portNum {\n918: \t\t\t\t\t\t\t\tfound = true\n919: \t\t\t\t\t\t\t\tbreak\n920: \t\t\t\t\t\t\t}\n921: \t\t\t\t\t\t}\n922: \n923: \t\t\t\t\t\tif !found {\n924: \t\t\t\t\t\t\tsendMessage(\"PORT REMOVED\", \"%d\", portNum)\n925: \t\t\t\t\t\t}\n926: \t\t\t\t\t}\n927: \t\t\t\t}\n928: \n929: \t\t\tcase strings.EqualFold(gvk.Kind, \"ConfigMap\"):\n930: \t\t\t\t// Check for data changes\n931: \t\t\t\toldData, oldDataExists, _ := unstructured.NestedMap(old.Object, \"data\")\n932: \t\t\t\tnewData, newDataExists, _ := unstructured.NestedMap(new.Object, \"data\")\n933: \n934: \t\t\t\tif oldDataExists \u0026\u0026 newDataExists {\n935: \t\t\t\t\t// Find added, changed, and removed keys\n936: \t\t\t\t\tadded := []string{}\n937: \t\t\t\t\tchanged := []string{}\n938: \t\t\t\t\tremoved := []string{}\n939: \n940: \t\t\t\t\tfor k := range newData {\n941: \t\t\t\t\t\tif _, exists := oldData[k]; !exists {\n942: \t\t\t\t\t\t\tadded = append(added, k)\n943: \t\t\t\t\t\t}\n944: \t\t\t\t\t}\n945: \n946: \t\t\t\t\tfor k := range oldData {\n947: \t\t\t\t\t\tif _, exists := newData[k]; !exists {\n948: \t\t\t\t\t\t\tremoved = append(removed, k)\n949: \t\t\t\t\t\t} else if !reflect.DeepEqual(oldData[k], newData[k]) {\n950: \t\t\t\t\t\t\tchanged = append(changed, k)\n951: \t\t\t\t\t\t}\n952: \t\t\t\t\t}\n953: \n954: \t\t\t\t\tif len(added) \u003e 0 {\n955: \t\t\t\t\t\tsendMessage(\"CONFIG ADDED\", \"%s: Added keys: %s\", objectName, strings.Join(added, \", \"))\n956: \t\t\t\t\t}\n957: \t\t\t\t\tif len(changed) \u003e 0 {\n958: \t\t\t\t\t\tsendMessage(\"CONFIG MODIFIED\", \"%s: Modified keys: %s\", objectName, strings.Join(changed, \", \"))\n959: \t\t\t\t\t}\n960: \t\t\t\t\tif len(removed) \u003e 0 {\n961: \t\t\t\t\t\tsendMessage(\"CONFIG REMOVED\", \"%s: Removed keys: %s\", objectName, strings.Join(removed, \", \"))\n962: \t\t\t\t\t}\n963: \t\t\t\t}\n964: \n965: \t\t\tcase strings.EqualFold(gvk.Kind, \"Secret\"):\n966: \t\t\t\t// Only report changes to keys, not values (for security)\n967: \t\t\t\toldData, oldDataExists, _ := unstructured.NestedMap(old.Object, \"data\")\n968: \t\t\t\tnewData, newDataExists, _ := unstructured.NestedMap(new.Object, \"data\")\n969: \n970: \t\t\t\tif oldDataExists \u0026\u0026 newDataExists {\n971: \t\t\t\t\toldKeys := make([]string, 0, len(oldData))\n972: \t\t\t\t\tfor k := range oldData {\n973: \t\t\t\t\t\toldKeys = append(oldKeys, k)\n974: \t\t\t\t\t}\n975: \n976: \t\t\t\t\tnewKeys := make([]string, 0, len(newData))\n977: \t\t\t\t\tfor k := range newData {\n978: \t\t\t\t\t\tnewKeys = append(newKeys, k)\n979: \t\t\t\t\t}\n980: \n981: \t\t\t\t\tsort.Strings(oldKeys)\n982: \t\t\t\t\tsort.Strings(newKeys)\n983: \n984: \t\t\t\t\tif !reflect.DeepEqual(oldKeys, newKeys) {\n985: \t\t\t\t\t\tsendMessage(\"SECRET KEYS\", \"%s: Secret keys have been modified\", objectName)\n986: \t\t\t\t\t} else {\n987: \t\t\t\t\t\t// Keys are the same, but value(s) changed\n988: \t\t\t\t\t\tfor k := range oldData {\n989: \t\t\t\t\t\t\tif !reflect.DeepEqual(oldData[k], newData[k]) {\n990: \t\t\t\t\t\t\t\tsendMessage(\"SECRET VALUE\", \"%s: Value for key '%s' has been changed\", objectName, k)\n991: \t\t\t\t\t\t\t\tbreak\n992: \t\t\t\t\t\t\t}\n993: \t\t\t\t\t\t}\n994: \t\t\t\t\t}\n995: \t\t\t\t}\n996: \n997: \t\t\tcase strings.EqualFold(gvk.Kind, \"StatefulSet\"), strings.EqualFold(gvk.Kind, \"DaemonSet\"):\n998: \t\t\t\t// Similar to Deployment updates\n999: \t\t\t\toldReplicas, oldExists, _ := unstructured.NestedInt64(old.Object, \"spec\", \"replicas\")\n1000: \t\t\t\tnewReplicas, newExists, _ := unstructured.NestedInt64(new.Object, \"spec\", \"replicas\")\n1001: \n1002: \t\t\t\tif oldExists \u0026\u0026 newExists \u0026\u0026 oldReplicas != newReplicas {\n1003: \t\t\t\t\tsendMessage(\"REPLICAS CHANGED\", \"%s %s: %d → %d\", gvk.Kind, objectName, oldReplicas, newReplicas)\n1004: \t\t\t\t}\n1005: \n1006: \t\t\t\t// Status updates\n1007: \t\t\t\toldStatus, oldStatusExists, _ := unstructured.NestedMap(old.Object, \"status\")\n1008: \t\t\t\tnewStatus, newStatusExists, _ := unstructured.NestedMap(new.Object, \"status\")\n1009: \n1010: \t\t\t\tif oldStatusExists \u0026\u0026 newStatusExists {\n1011: \t\t\t\t\toldReady, oldReadyExists, _ := unstructured.NestedInt64(oldStatus, \"readyReplicas\")\n1012: \t\t\t\t\tnewReady, newReadyExists, _ := unstructured.NestedInt64(newStatus, \"readyReplicas\")\n1013: \n1014: \t\t\t\t\tif oldReadyExists \u0026\u0026 newReadyExists \u0026\u0026 oldReady != newReady {\n1015: \t\t\t\t\t\tsendMessage(\"READY REPLICAS\", \"%s %s: %d → %d\", gvk.Kind, objectName, oldReady, newReady)\n1016: \t\t\t\t\t}\n1017: \t\t\t\t}\n1018: \n1019: \t\t\tcase strings.EqualFold(gvk.Kind, \"Ingress\"):\n1020: \t\t\t\t// Check for host changes\n1021: \t\t\t\toldRules, oldRulesExists, _ := unstructured.NestedSlice(old.Object, \"spec\", \"rules\")\n1022: \t\t\t\tnewRules, newRulesExists, _ := unstructured.NestedSlice(new.Object, \"spec\", \"rules\")\n1023: \n1024: \t\t\t\tif oldRulesExists \u0026\u0026 newRulesExists \u0026\u0026 !reflect.DeepEqual(oldRules, newRules) {\n1025: \t\t\t\t\toldHosts := []string{}\n1026: \t\t\t\t\tfor _, r := range oldRules {\n1027: \t\t\t\t\t\trule := r.(map[string]interface{})\n1028: \t\t\t\t\t\tif host, exists := rule[\"host\"]; exists {\n1029: \t\t\t\t\t\t\toldHosts = append(oldHosts, host.(string))\n1030: \t\t\t\t\t\t}\n1031: \t\t\t\t\t}\n1032: \n1033: \t\t\t\t\tnewHosts := []string{}\n1034: \t\t\t\t\tfor _, r := range newRules {\n1035: \t\t\t\t\t\trule := r.(map[string]interface{})\n1036: \t\t\t\t\t\tif host, exists := rule[\"host\"]; exists {\n1037: \t\t\t\t\t\t\tnewHosts = append(newHosts, host.(string))\n1038: \t\t\t\t\t\t}\n1039: \t\t\t\t\t}\n1040: \n1041: \t\t\t\t\tsort.Strings(oldHosts)\n1042: \t\t\t\t\tsort.Strings(newHosts)\n1043: \n1044: \t\t\t\t\tif !reflect.DeepEqual(oldHosts, newHosts) {\n1045: \t\t\t\t\t\tsendMessage(\"INGRESS HOSTS\", \"%s: Host configuration changed\", objectName)\n1046: \t\t\t\t\t\tsendMessage(\"HOSTS CHANGED\", \"Before: %s, After: %s\", strings.Join(oldHosts, \", \"), strings.Join(newHosts, \", \"))\n1047: \t\t\t\t\t} else {\n1048: \t\t\t\t\t\tsendMessage(\"INGRESS RULES\", \"%s: Path rules have been updated\", objectName)\n1049: \t\t\t\t\t}\n1050: \t\t\t\t}\n1051: \n1052: \t\t\t\t// Check for TLS changes\n1053: \t\t\t\toldTLS, oldTLSExists, _ := unstructured.NestedSlice(old.Object, \"spec\", \"tls\")\n1054: \t\t\t\tnewTLS, newTLSExists, _ := unstructured.NestedSlice(new.Object, \"spec\", \"tls\")\n1055: \n1056: \t\t\t\tif (!oldTLSExists \u0026\u0026 newTLSExists) || (oldTLSExists \u0026\u0026 !newTLSExists) {\n1057: \t\t\t\t\tsendMessage(\"TLS CONFIG\", \"%s: TLS configuration %s\", objectName, \"added\")\n1058: \t\t\t\t\tsendMessage(\"TLS CONFIG\", \"%s: TLS configuration %s\", objectName, \"removed\")\n1059: \t\t\t\t} else if oldTLSExists \u0026\u0026 newTLSExists \u0026\u0026 !reflect.DeepEqual(oldTLS, newTLS) {\n1060: \t\t\t\t\tsendMessage(\"TLS CONFIG\", \"%s: TLS configuration modified\", objectName)\n1061: \t\t\t\t}\n1062: \t\t\t}\n1063: \t\t},\n1064: \t\tDeleteFunc: func(obj interface{}) {\n1065: \t\t\tmux.RLock()\n1066: \t\t\tdefer mux.RUnlock()\n1067: \t\t\tif !synced {\n1068: \t\t\t\treturn\n1069: \t\t\t}\n1070: \n1071: \t\t\titem, ok := obj.(*unstructured.Unstructured)\n1072: \t\t\tif !ok {\n1073: \t\t\t\tlog.Printf(\"item is not *unstructured.Unstructured\")\n1074: \t\t\t\treturn\n1075: \t\t\t}\n1076: \n1077: \t\t\tgvk := item.GroupVersionKind()\n1078: \t\t\tobjectName := item.GetName()\n1079: \t\t\tobjectNamespace := item.GetNamespace()\n1080: \t\t\tuid := string(item.GetUID())\n1081: \n1082: \t\t\tsendMessage(\"DELETED\", \"Kind=%s, Name=%s, Namespace=%s, UID=%s\",\n1083: \t\t\t\tgvk.Kind, objectName, objectNamespace, uid)\n1084: \n1085: \t\t\t// Resource-specific deletion messages\n1086: \t\t\tswitch {\n1087: \t\t\tcase strings.EqualFold(gvk.Kind, \"Service\"):\n1088: \t\t\t\tsendMessage(\"SERVICE REMOVED\", \"Service %s in namespace %s was deleted\", objectName, objectNamespace)\n1089: \n1090: \t\t\tcase strings.EqualFold(gvk.Kind, \"Deployment\"):\n1091: \t\t\t\tsendMessage(\"DEPLOYMENT REMOVED\", \"Deployment %s in namespace %s was deleted\", objectName, objectNamespace)\n1092: \n1093: \t\t\tcase strings.EqualFold(gvk.Kind, \"ConfigMap\"):\n1094: \t\t\t\tsendMessage(\"CONFIG REMOVED\", \"ConfigMap %s in namespace %s was deleted\", objectName, objectNamespace)\n1095: \n1096: \t\t\tcase strings.EqualFold(gvk.Kind, \"Secret\"):\n1097: \t\t\t\tsendMessage(\"SECRET REMOVED\", \"Secret %s in namespace %s was deleted\", objectName, objectNamespace)\n1098: \n1099: \t\t\tcase strings.EqualFold(gvk.Kind, \"Ingress\"):\n1100: \t\t\t\tsendMessage(\"INGRESS REMOVED\", \"Ingress %s in namespace %s was deleted\", objectName, objectNamespace)\n1101: \t\t\t}\n1102: \t\t},\n1103: \t})\n1104: \n",
      "line": "558-1103",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/jwt/config.go",
      "code": "92: \tif os.Getenv(RefreshExpirationEnv) == \"\" {\n93: \t\tos.Setenv(RefreshExpirationEnv, \"168\") // 7 days default\n94: \t}\n",
      "line": "93",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/jwt/config.go",
      "code": "88: \tif os.Getenv(TokenExpirationEnv) == \"\" {\n89: \t\tos.Setenv(TokenExpirationEnv, \"24\") // 24 hours default\n90: \t}\n",
      "line": "89",
      "column": "3",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/jwt/config.go",
      "code": "44: func SetJWTSecret(secret string) {\n45: \tos.Setenv(JWTSecretEnv, secret)\n46: }\n",
      "line": "45",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/its/manual/handlers/cluster.go",
      "code": "369: \texec.Command(\"helm\", \"repo\", \"add\", \"ocm\", \"https://open-cluster-management.io/helm-charts\").Run()\n370: \texec.Command(\"helm\", \"repo\", \"update\").Run()\n371: \n",
      "line": "370",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/its/manual/handlers/cluster.go",
      "code": "368: \n369: \texec.Command(\"helm\", \"repo\", \"add\", \"ocm\", \"https://open-cluster-management.io/helm-charts\").Run()\n370: \texec.Command(\"helm\", \"repo\", \"update\").Run()\n",
      "line": "369",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/detach.go",
      "code": "405: \t\t\tgo func(c *WebSocketClient) {\n406: \t\t\t\tc.Conn.Close()\n407: \t\t\t}(client)\n",
      "line": "406",
      "column": "5",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/detach.go",
      "code": "374: \t\t\t// Close the connection\n375: \t\t\tclient.Conn.Close()\n376: \t\t\tbreak\n",
      "line": "375",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "231: \tredis.SetGitToken(gitToken)\n232: \tredis.SetWorkloadLabel(request.WorkloadLabel) // Store workload label in Redis\n233: \n",
      "line": "232",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "230: \tredis.SetBranch(branch)\n231: \tredis.SetGitToken(gitToken)\n232: \tredis.SetWorkloadLabel(request.WorkloadLabel) // Store workload label in Redis\n",
      "line": "231",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "229: \tredis.SetRepoURL(request.RepoURL)\n230: \tredis.SetBranch(branch)\n231: \tredis.SetGitToken(gitToken)\n",
      "line": "230",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "228: \tredis.SetFilePath(request.FolderPath)\n229: \tredis.SetRepoURL(request.RepoURL)\n230: \tredis.SetBranch(branch)\n",
      "line": "229",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "227: \t// Save deployment configuration in Redis for webhook usage\n228: \tredis.SetFilePath(request.FolderPath)\n229: \tredis.SetRepoURL(request.RepoURL)\n",
      "line": "228",
      "column": "2",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/deploy.go",
      "code": "157: \t\t\tfileBytes, err := ioutil.ReadAll(fileResp.Body)\n158: \t\t\tfileResp.Body.Close()\n159: \t\t\tif err != nil {\n",
      "line": "158",
      "column": "4",
      "nosec": false,
      "suppressions": null
    },
    {
      "severity": "LOW",
      "confidence": "HIGH",
      "cwe": {
        "id": "703",
        "url": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "rule_id": "G104",
      "details": "Errors unhandled",
      "file": "/home/peroxide/ui/backend/api/cluster_socket.go",
      "code": "203: \tlog.Printf(\"WebSocket client unregistered for cluster '%s'\", clusterName)\n204: \tws.Close()\n205: }\n",
      "line": "204",
      "column": "2",
      "nosec": false,
      "suppressions": null
    }
  ],
  "Stats": {
    "files": 63,
    "lines": 17385,
    "nosec": 0,
    "found": 80
  },
  "GosecVersion": "dev"
}
