name: Check Spelling

on:
  push:
    branches: ["**"]
    tags-ignore: ["**"]
  pull_request_target:
    branches: ["**"]
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: read

jobs:
  spelling:
    name: Check Spelling
    permissions:
      contents: read
      pull-requests: read
      actions: read
      security-events: write
    outputs:
      has-issues: ${{ steps.spelling.outputs.has-issues }}
      results-path: ${{ steps.spelling.outputs.results-path }}
      total-issues: ${{ steps.spelling.outputs.total-issues }}
    runs-on: ubuntu-latest
    if: ${{ contains(github.event_name, 'pull_request') || github.event_name == 'push' }}
    concurrency:
      group: spelling-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install cspell
        run: |
          npm install -g cspell@8.14.4
          cspell --version

      - name: Create results directory
        run: |
          mkdir -p .github/spelling-results
          echo "Results directory created"

      - name: Generate cspell configuration
        run: |
          cat > .cspell.json << 'EOF'
          {
            "version": "0.2",
            "language": "en",
            "words": [
              "github",
              "workflow",
              "workflows",
              "repo",
              "repos",
              "config",
              "configs",
              "dir",
              "dirs",
              "txt",
              "md",
              "yml",
              "yaml",
              "json",
              "js",
              "ts",
              "html",
              "css",
              "scss",
              "jsx",
              "tsx",
              "vue",
              "dockerfile",
              "makefile",
              "gitignore",
              "readme",
              "changelog",
              "license",
              "todo",
              "fixme",
              "hack",
              "xxx",
              "api",
              "apis",
              "url",
              "urls",
              "uri",
              "uris",
              "http",
              "https",
              "www",
              "localhost",
              "env",
              "vars",
              "bool",
              "str",
              "int",
              "obj",
              "func",
              "param",
              "params",
              "arg",
              "args",
              "util",
              "utils",
              "lib",
              "libs",
              "src",
              "dist",
              "build",
              "dev",
              "prod",
              "test",
              "spec",
              "mock",
              "stub",
              "async",
              "await",
              "const",
              "let",
              "var",
              "npm",
              "yarn",
              "pnpm",
              "node",
              "nodejs",
              "javascript",
              "typescript",
              "eslint",
              "prettier",
              "webpack",
              "babel",
              "rollup",
              "vite",
              "jest",
              "vitest",
              "cypress",
              "playwright"
            ],
            "dictionaries": [
              "en",
              "en-us",
              "companies",
              "filetypes",
              "fonts",
              "html",
              "css",
              "javascript",
              "typescript",
              "node",
              "npm",
              "software-terms"
            ],
            "dictionaryDefinitions": [
              {
                "name": "project-words",
                "path": ".github/spelling/project-words.txt",
                "addWords": true
              }
            ],
            "files": [
              "**/*.{md,txt,js,ts,jsx,tsx,vue,html,css,scss,json,yml,yaml}"
            ],
            "ignorePaths": [
              "node_modules/**",
              ".git/**",
              "dist/**",
              "build/**",
              "coverage/**",
              "*.min.*",
              "package-lock.json",
              "yarn.lock",
              "pnpm-lock.yaml",
              ".github/spelling-results/**"
            ],
            "ignoreWords": [
              "FIXME",
              "TODO",
              "XXX",
              "HACK"
            ],
            "allowCompoundWords": true,
            "caseSensitive": false,
            "checkFilenames": true,
            "minWordLength": 3
          }
          EOF

      - name: Create project dictionary directory
        run: |
          mkdir -p .github/spelling
          if [ ! -f .github/spelling/project-words.txt ]; then
            touch .github/spelling/project-words.txt
          fi

      - name: Run spell check
        id: spelling
        continue-on-error: true
        run: |
          echo "Running spell check..."
          
          if cspell --no-progress --no-summary --config .cspell.json "**" > .github/spelling-results/raw-output.txt 2>&1; then
            echo "No spelling issues found"
            echo "has-issues=false" >> $GITHUB_OUTPUT
            echo "total-issues=0" >> $GITHUB_OUTPUT
            echo "results-path=.github/spelling-results" >> $GITHUB_OUTPUT
          else
            echo "Spelling issues found"
            
            cat .github/spelling-results/raw-output.txt | grep -E "^.*:\d+:\d+ - " > .github/spelling-results/issues.txt || true
            
            TOTAL_ISSUES=$(cat .github/spelling-results/issues.txt | wc -l || echo "0")
            echo "Found $TOTAL_ISSUES spelling issues"
            
            echo "# Spelling Check Results" > .github/spelling-results/formatted-results.md
            echo "" >> .github/spelling-results/formatted-results.md
            echo "Found **$TOTAL_ISSUES** spelling issues:" >> .github/spelling-results/formatted-results.md
            echo "" >> .github/spelling-results/formatted-results.md
            
            if [ -s .github/spelling-results/issues.txt ]; then
              echo "## Issues Found:" >> .github/spelling-results/formatted-results.md
              echo "" >> .github/spelling-results/formatted-results.md
              echo '```' >> .github/spelling-results/formatted-results.md
              cat .github/spelling-results/issues.txt >> .github/spelling-results/formatted-results.md
              echo '```' >> .github/spelling-results/formatted-results.md
              echo "" >> .github/spelling-results/formatted-results.md
              echo "## To fix these issues:" >> .github/spelling-results/formatted-results.md
              echo "1. Fix the spelling errors in the files" >> .github/spelling-results/formatted-results.md
              echo "2. Or add valid words to \`.github/spelling/project-words.txt\`" >> .github/spelling-results/formatted-results.md
              echo "3. Or comment \`@github-actions add-words: word1 word2 word3\`" >> .github/spelling-results/formatted-results.md
            fi
            
            if [ "$TOTAL_ISSUES" -gt 0 ]; then
              echo "has-issues=true" >> $GITHUB_OUTPUT
              echo "total-issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            else
              echo "has-issues=false" >> $GITHUB_OUTPUT
              echo "total-issues=0" >> $GITHUB_OUTPUT
            fi
            
            echo "results-path=.github/spelling-results" >> $GITHUB_OUTPUT
          fi

      - name: Upload spelling results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spelling-results-${{ github.run_id }}
          path: .github/spelling-results/
          retention-days: 30

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (steps.spelling.outputs.has-issues == 'true' || steps.spelling.outputs.has-issues == 'false')
        continue-on-error: true
        with:
          sarif_file: .github/spelling-results/sarif-output.sarif
          category: spelling

  comment-push:
    name: Report (Push)
    runs-on: ubuntu-latest
    needs: spelling
    permissions:
      contents: write
      issues: write
    if: always() && github.event_name == 'push' && needs.spelling.outputs.has-issues == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download spelling results
        uses: actions/download-artifact@v4
        with:
          name: spelling-results-${{ github.run_id }}
          path: .github/spelling-results/

      - name: Create issue for spelling errors
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/spelling-results/formatted-results.md';
            
            if (!fs.existsSync(path)) {
              console.log('No formatted results found');
              return;
            }
            
            const content = fs.readFileSync(path, 'utf8');
            const totalIssues = '${{ needs.spelling.outputs.total-issues }}';
            
            const title = `Spelling Check Failed - ${totalIssues} issues found`;
            const body = `
            ## Spelling Check Results for ${context.sha.substring(0, 7)}
            
            ${content}
            
            **Branch**: ${context.ref}
            **Commit**: ${context.sha}
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            
            ---
            *This issue was automatically created by the spelling check workflow.*
            `;
            
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['spelling-check', 'bug']
              });
              console.log('Issue created successfully');
            } catch (error) {
              console.error('Error creating issue:', error);
            }

  comment-pr:
    name: Report (PR)
    runs-on: ubuntu-latest
    needs: spelling
    permissions:
      pull-requests: write
    if: always() && contains(github.event_name, 'pull_request') && needs.spelling.outputs.has-issues == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download spelling results
        uses: actions/download-artifact@v4
        with:
          name: spelling-results-${{ github.run_id }}
          path: .github/spelling-results/

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/spelling-results/formatted-results.md';
            
            if (!fs.existsSync(path)) {
              console.log('No formatted results found');
              return;
            }
            
            const content = fs.readFileSync(path, 'utf8');
            const totalIssues = '${{ needs.spelling.outputs.total-issues }}';
            
            const body = `
            ## Spelling Check Results
            
            ${content}
            
            **Commit**: ${context.sha.substring(0, 7)}
            **Files checked**: All tracked files
            
            ---
            *This comment was automatically generated by the spelling check workflow.*
            `;
            
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('Spelling Check Results')
            );
            
            try {
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body
                });
                console.log('Updated existing comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
                console.log('Created new comment');
              }
            } catch (error) {
              console.error('Error updating comment:', error);
            }

  update-dictionary:
    name: Update Dictionary
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@github-actions add-words:')
    concurrency:
      group: spelling-update-${{ github.event.issue.number }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract and add words
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const comment = context.payload.comment.body;
            const match = comment.match(/@github-actions add-words:\s*(.+)/);
            
            if (!match) {
              console.log('No words found in comment');
              return;
            }
            
            const wordsToAdd = match[1]
              .split(/[\s,]+/)
              .map(word => word.trim())
              .filter(word => word.length > 0);
            
            if (wordsToAdd.length === 0) {
              console.log('No valid words to add');
              return;
            }
            
            console.log('Words to add:', wordsToAdd);
            
            const dictDir = '.github/spelling';
            if (!fs.existsSync(dictDir)) {
              fs.mkdirSync(dictDir, { recursive: true });
            }
            
            const dictFile = path.join(dictDir, 'project-words.txt');
            let existingWords = [];
            
            if (fs.existsSync(dictFile)) {
              existingWords = fs.readFileSync(dictFile, 'utf8')
                .split('\n')
                .map(word => word.trim())
                .filter(word => word.length > 0);
            }
            
            const newWords = wordsToAdd.filter(word => !existingWords.includes(word));
            
            if (newWords.length === 0) {
              console.log('All words already exist in dictionary');
              return;
            }
            
            const allWords = [...existingWords, ...newWords].sort();
            fs.writeFileSync(dictFile, allWords.join('\n') + '\n');
            
            console.log('Added words:', newWords);
            
            await exec.exec('git', ['config', 'user.name', 'github-actions[bot]']);
            await exec.exec('git', ['config', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
            
            await exec.exec('git', ['add', dictFile]);
            await exec.exec('git', ['commit', '-m', `Add words to spelling dictionary: ${newWords.join(', ')}`]);
            await exec.exec('git', ['push']);
            
            console.log('Dictionary updated successfully');

      - name: Reply to comment
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const match = comment.match(/@github-actions add-words:\s*(.+)/);
            
            if (!match) return;
            
            const wordsToAdd = match[1]
              .split(/[\s,]+/)
              .map(word => word.trim())
              .filter(word => word.length > 0);
            
            const reply = `
            **Dictionary Updated Successfully**
            
            Added ${wordsToAdd.length} words to the spelling dictionary:
            \`${wordsToAdd.join(', ')}\`
            
            The spelling check will now pass for these words in future runs.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reply
            });
            
